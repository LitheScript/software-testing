/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 41.0, "minX": 0.0, "maxY": 183656.0, "series": [{"data": [[0.0, 84.0], [0.1, 87.0], [0.2, 87.0], [0.3, 90.0], [0.4, 91.0], [0.5, 93.0], [0.6, 93.0], [0.7, 96.0], [0.8, 96.0], [0.9, 97.0], [1.0, 98.0], [1.1, 98.0], [1.2, 99.0], [1.3, 99.0], [1.4, 99.0], [1.5, 100.0], [1.6, 101.0], [1.7, 101.0], [1.8, 101.0], [1.9, 101.0], [2.0, 102.0], [2.1, 102.0], [2.2, 102.0], [2.3, 102.0], [2.4, 102.0], [2.5, 103.0], [2.6, 104.0], [2.7, 104.0], [2.8, 104.0], [2.9, 104.0], [3.0, 104.0], [3.1, 105.0], [3.2, 105.0], [3.3, 107.0], [3.4, 107.0], [3.5, 108.0], [3.6, 108.0], [3.7, 108.0], [3.8, 108.0], [3.9, 109.0], [4.0, 109.0], [4.1, 109.0], [4.2, 109.0], [4.3, 109.0], [4.4, 110.0], [4.5, 110.0], [4.6, 111.0], [4.7, 112.0], [4.8, 112.0], [4.9, 113.0], [5.0, 113.0], [5.1, 114.0], [5.2, 114.0], [5.3, 115.0], [5.4, 115.0], [5.5, 115.0], [5.6, 116.0], [5.7, 117.0], [5.8, 117.0], [5.9, 118.0], [6.0, 118.0], [6.1, 118.0], [6.2, 118.0], [6.3, 118.0], [6.4, 118.0], [6.5, 119.0], [6.6, 120.0], [6.7, 120.0], [6.8, 121.0], [6.9, 121.0], [7.0, 122.0], [7.1, 122.0], [7.2, 122.0], [7.3, 123.0], [7.4, 123.0], [7.5, 124.0], [7.6, 124.0], [7.7, 125.0], [7.8, 126.0], [7.9, 126.0], [8.0, 126.0], [8.1, 127.0], [8.2, 127.0], [8.3, 127.0], [8.4, 128.0], [8.5, 128.0], [8.6, 128.0], [8.7, 128.0], [8.8, 128.0], [8.9, 128.0], [9.0, 128.0], [9.1, 129.0], [9.2, 129.0], [9.3, 129.0], [9.4, 129.0], [9.5, 129.0], [9.6, 130.0], [9.7, 130.0], [9.8, 130.0], [9.9, 131.0], [10.0, 131.0], [10.1, 131.0], [10.2, 132.0], [10.3, 132.0], [10.4, 132.0], [10.5, 133.0], [10.6, 133.0], [10.7, 133.0], [10.8, 133.0], [10.9, 133.0], [11.0, 133.0], [11.1, 133.0], [11.2, 133.0], [11.3, 134.0], [11.4, 134.0], [11.5, 134.0], [11.6, 134.0], [11.7, 134.0], [11.8, 134.0], [11.9, 135.0], [12.0, 135.0], [12.1, 135.0], [12.2, 135.0], [12.3, 135.0], [12.4, 135.0], [12.5, 135.0], [12.6, 135.0], [12.7, 136.0], [12.8, 136.0], [12.9, 137.0], [13.0, 137.0], [13.1, 137.0], [13.2, 137.0], [13.3, 137.0], [13.4, 137.0], [13.5, 138.0], [13.6, 138.0], [13.7, 138.0], [13.8, 138.0], [13.9, 138.0], [14.0, 138.0], [14.1, 138.0], [14.2, 138.0], [14.3, 139.0], [14.4, 139.0], [14.5, 139.0], [14.6, 139.0], [14.7, 139.0], [14.8, 139.0], [14.9, 139.0], [15.0, 139.0], [15.1, 140.0], [15.2, 140.0], [15.3, 140.0], [15.4, 140.0], [15.5, 141.0], [15.6, 141.0], [15.7, 141.0], [15.8, 141.0], [15.9, 141.0], [16.0, 141.0], [16.1, 141.0], [16.2, 141.0], [16.3, 142.0], [16.4, 142.0], [16.5, 142.0], [16.6, 142.0], [16.7, 142.0], [16.8, 142.0], [16.9, 142.0], [17.0, 143.0], [17.1, 143.0], [17.2, 143.0], [17.3, 143.0], [17.4, 143.0], [17.5, 143.0], [17.6, 143.0], [17.7, 143.0], [17.8, 143.0], [17.9, 143.0], [18.0, 143.0], [18.1, 143.0], [18.2, 144.0], [18.3, 144.0], [18.4, 144.0], [18.5, 144.0], [18.6, 144.0], [18.7, 144.0], [18.8, 144.0], [18.9, 144.0], [19.0, 144.0], [19.1, 144.0], [19.2, 145.0], [19.3, 145.0], [19.4, 145.0], [19.5, 145.0], [19.6, 145.0], [19.7, 145.0], [19.8, 146.0], [19.9, 146.0], [20.0, 146.0], [20.1, 146.0], [20.2, 146.0], [20.3, 146.0], [20.4, 146.0], [20.5, 146.0], [20.6, 147.0], [20.7, 147.0], [20.8, 147.0], [20.9, 147.0], [21.0, 147.0], [21.1, 147.0], [21.2, 147.0], [21.3, 147.0], [21.4, 147.0], [21.5, 148.0], [21.6, 148.0], [21.7, 148.0], [21.8, 148.0], [21.9, 148.0], [22.0, 149.0], [22.1, 149.0], [22.2, 149.0], [22.3, 149.0], [22.4, 149.0], [22.5, 149.0], [22.6, 150.0], [22.7, 150.0], [22.8, 150.0], [22.9, 150.0], [23.0, 150.0], [23.1, 150.0], [23.2, 150.0], [23.3, 151.0], [23.4, 151.0], [23.5, 151.0], [23.6, 151.0], [23.7, 151.0], [23.8, 151.0], [23.9, 151.0], [24.0, 151.0], [24.1, 151.0], [24.2, 151.0], [24.3, 152.0], [24.4, 152.0], [24.5, 152.0], [24.6, 152.0], [24.7, 152.0], [24.8, 152.0], [24.9, 152.0], [25.0, 152.0], [25.1, 152.0], [25.2, 152.0], [25.3, 152.0], [25.4, 153.0], [25.5, 153.0], [25.6, 153.0], [25.7, 153.0], [25.8, 153.0], [25.9, 153.0], [26.0, 153.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 154.0], [26.6, 154.0], [26.7, 154.0], [26.8, 154.0], [26.9, 154.0], [27.0, 154.0], [27.1, 154.0], [27.2, 154.0], [27.3, 154.0], [27.4, 154.0], [27.5, 154.0], [27.6, 154.0], [27.7, 154.0], [27.8, 154.0], [27.9, 154.0], [28.0, 154.0], [28.1, 155.0], [28.2, 155.0], [28.3, 155.0], [28.4, 155.0], [28.5, 155.0], [28.6, 155.0], [28.7, 155.0], [28.8, 155.0], [28.9, 155.0], [29.0, 155.0], [29.1, 155.0], [29.2, 155.0], [29.3, 156.0], [29.4, 156.0], [29.5, 156.0], [29.6, 156.0], [29.7, 156.0], [29.8, 156.0], [29.9, 156.0], [30.0, 156.0], [30.1, 157.0], [30.2, 157.0], [30.3, 157.0], [30.4, 157.0], [30.5, 157.0], [30.6, 157.0], [30.7, 157.0], [30.8, 157.0], [30.9, 157.0], [31.0, 157.0], [31.1, 157.0], [31.2, 157.0], [31.3, 158.0], [31.4, 158.0], [31.5, 158.0], [31.6, 158.0], [31.7, 158.0], [31.8, 158.0], [31.9, 158.0], [32.0, 158.0], [32.1, 158.0], [32.2, 158.0], [32.3, 158.0], [32.4, 158.0], [32.5, 159.0], [32.6, 159.0], [32.7, 159.0], [32.8, 159.0], [32.9, 159.0], [33.0, 159.0], [33.1, 159.0], [33.2, 159.0], [33.3, 160.0], [33.4, 160.0], [33.5, 160.0], [33.6, 160.0], [33.7, 160.0], [33.8, 160.0], [33.9, 160.0], [34.0, 160.0], [34.1, 161.0], [34.2, 161.0], [34.3, 161.0], [34.4, 161.0], [34.5, 161.0], [34.6, 161.0], [34.7, 161.0], [34.8, 161.0], [34.9, 161.0], [35.0, 161.0], [35.1, 161.0], [35.2, 161.0], [35.3, 161.0], [35.4, 161.0], [35.5, 162.0], [35.6, 162.0], [35.7, 162.0], [35.8, 162.0], [35.9, 162.0], [36.0, 162.0], [36.1, 162.0], [36.2, 162.0], [36.3, 163.0], [36.4, 163.0], [36.5, 163.0], [36.6, 163.0], [36.7, 163.0], [36.8, 163.0], [36.9, 163.0], [37.0, 163.0], [37.1, 163.0], [37.2, 163.0], [37.3, 163.0], [37.4, 163.0], [37.5, 164.0], [37.6, 164.0], [37.7, 164.0], [37.8, 164.0], [37.9, 164.0], [38.0, 164.0], [38.1, 165.0], [38.2, 165.0], [38.3, 165.0], [38.4, 165.0], [38.5, 165.0], [38.6, 165.0], [38.7, 166.0], [38.8, 166.0], [38.9, 166.0], [39.0, 166.0], [39.1, 166.0], [39.2, 166.0], [39.3, 166.0], [39.4, 166.0], [39.5, 167.0], [39.6, 167.0], [39.7, 167.0], [39.8, 167.0], [39.9, 167.0], [40.0, 167.0], [40.1, 167.0], [40.2, 168.0], [40.3, 168.0], [40.4, 168.0], [40.5, 168.0], [40.6, 168.0], [40.7, 168.0], [40.8, 169.0], [40.9, 169.0], [41.0, 169.0], [41.1, 169.0], [41.2, 169.0], [41.3, 169.0], [41.4, 169.0], [41.5, 169.0], [41.6, 169.0], [41.7, 170.0], [41.8, 170.0], [41.9, 170.0], [42.0, 170.0], [42.1, 170.0], [42.2, 170.0], [42.3, 170.0], [42.4, 170.0], [42.5, 171.0], [42.6, 171.0], [42.7, 171.0], [42.8, 171.0], [42.9, 171.0], [43.0, 171.0], [43.1, 171.0], [43.2, 172.0], [43.3, 172.0], [43.4, 172.0], [43.5, 172.0], [43.6, 172.0], [43.7, 172.0], [43.8, 173.0], [43.9, 173.0], [44.0, 173.0], [44.1, 173.0], [44.2, 173.0], [44.3, 173.0], [44.4, 173.0], [44.5, 174.0], [44.6, 174.0], [44.7, 174.0], [44.8, 174.0], [44.9, 174.0], [45.0, 174.0], [45.1, 174.0], [45.2, 174.0], [45.3, 174.0], [45.4, 174.0], [45.5, 174.0], [45.6, 174.0], [45.7, 174.0], [45.8, 174.0], [45.9, 175.0], [46.0, 175.0], [46.1, 175.0], [46.2, 175.0], [46.3, 175.0], [46.4, 175.0], [46.5, 175.0], [46.6, 175.0], [46.7, 175.0], [46.8, 175.0], [46.9, 175.0], [47.0, 175.0], [47.1, 176.0], [47.2, 176.0], [47.3, 176.0], [47.4, 176.0], [47.5, 176.0], [47.6, 176.0], [47.7, 176.0], [47.8, 176.0], [47.9, 176.0], [48.0, 177.0], [48.1, 177.0], [48.2, 177.0], [48.3, 177.0], [48.4, 177.0], [48.5, 177.0], [48.6, 177.0], [48.7, 177.0], [48.8, 178.0], [48.9, 178.0], [49.0, 178.0], [49.1, 178.0], [49.2, 178.0], [49.3, 178.0], [49.4, 178.0], [49.5, 178.0], [49.6, 178.0], [49.7, 178.0], [49.8, 178.0], [49.9, 179.0], [50.0, 179.0], [50.1, 179.0], [50.2, 179.0], [50.3, 179.0], [50.4, 179.0], [50.5, 179.0], [50.6, 180.0], [50.7, 180.0], [50.8, 180.0], [50.9, 180.0], [51.0, 180.0], [51.1, 180.0], [51.2, 180.0], [51.3, 181.0], [51.4, 181.0], [51.5, 181.0], [51.6, 181.0], [51.7, 181.0], [51.8, 181.0], [51.9, 181.0], [52.0, 182.0], [52.1, 182.0], [52.2, 182.0], [52.3, 182.0], [52.4, 182.0], [52.5, 182.0], [52.6, 183.0], [52.7, 183.0], [52.8, 183.0], [52.9, 183.0], [53.0, 184.0], [53.1, 184.0], [53.2, 184.0], [53.3, 185.0], [53.4, 185.0], [53.5, 185.0], [53.6, 185.0], [53.7, 185.0], [53.8, 185.0], [53.9, 185.0], [54.0, 186.0], [54.1, 186.0], [54.2, 186.0], [54.3, 186.0], [54.4, 186.0], [54.5, 186.0], [54.6, 186.0], [54.7, 186.0], [54.8, 187.0], [54.9, 187.0], [55.0, 187.0], [55.1, 187.0], [55.2, 187.0], [55.3, 187.0], [55.4, 188.0], [55.5, 188.0], [55.6, 188.0], [55.7, 188.0], [55.8, 188.0], [55.9, 189.0], [56.0, 189.0], [56.1, 189.0], [56.2, 189.0], [56.3, 190.0], [56.4, 190.0], [56.5, 190.0], [56.6, 190.0], [56.7, 190.0], [56.8, 190.0], [56.9, 190.0], [57.0, 191.0], [57.1, 191.0], [57.2, 191.0], [57.3, 191.0], [57.4, 191.0], [57.5, 191.0], [57.6, 191.0], [57.7, 191.0], [57.8, 191.0], [57.9, 191.0], [58.0, 192.0], [58.1, 192.0], [58.2, 192.0], [58.3, 192.0], [58.4, 192.0], [58.5, 192.0], [58.6, 192.0], [58.7, 192.0], [58.8, 192.0], [58.9, 192.0], [59.0, 192.0], [59.1, 193.0], [59.2, 193.0], [59.3, 193.0], [59.4, 193.0], [59.5, 193.0], [59.6, 193.0], [59.7, 194.0], [59.8, 195.0], [59.9, 195.0], [60.0, 195.0], [60.1, 196.0], [60.2, 196.0], [60.3, 196.0], [60.4, 196.0], [60.5, 196.0], [60.6, 196.0], [60.7, 197.0], [60.8, 197.0], [60.9, 198.0], [61.0, 198.0], [61.1, 198.0], [61.2, 198.0], [61.3, 198.0], [61.4, 198.0], [61.5, 199.0], [61.6, 199.0], [61.7, 199.0], [61.8, 199.0], [61.9, 200.0], [62.0, 200.0], [62.1, 200.0], [62.2, 200.0], [62.3, 200.0], [62.4, 200.0], [62.5, 200.0], [62.6, 200.0], [62.7, 200.0], [62.8, 201.0], [62.9, 201.0], [63.0, 201.0], [63.1, 201.0], [63.2, 201.0], [63.3, 201.0], [63.4, 201.0], [63.5, 201.0], [63.6, 202.0], [63.7, 202.0], [63.8, 202.0], [63.9, 202.0], [64.0, 202.0], [64.1, 202.0], [64.2, 202.0], [64.3, 203.0], [64.4, 203.0], [64.5, 203.0], [64.6, 203.0], [64.7, 203.0], [64.8, 203.0], [64.9, 203.0], [65.0, 204.0], [65.1, 204.0], [65.2, 204.0], [65.3, 205.0], [65.4, 205.0], [65.5, 205.0], [65.6, 205.0], [65.7, 206.0], [65.8, 206.0], [65.9, 206.0], [66.0, 207.0], [66.1, 207.0], [66.2, 207.0], [66.3, 208.0], [66.4, 208.0], [66.5, 209.0], [66.6, 209.0], [66.7, 209.0], [66.8, 210.0], [66.9, 210.0], [67.0, 210.0], [67.1, 210.0], [67.2, 210.0], [67.3, 210.0], [67.4, 210.0], [67.5, 211.0], [67.6, 211.0], [67.7, 212.0], [67.8, 212.0], [67.9, 212.0], [68.0, 212.0], [68.1, 212.0], [68.2, 212.0], [68.3, 213.0], [68.4, 213.0], [68.5, 214.0], [68.6, 214.0], [68.7, 214.0], [68.8, 214.0], [68.9, 215.0], [69.0, 215.0], [69.1, 215.0], [69.2, 216.0], [69.3, 216.0], [69.4, 217.0], [69.5, 218.0], [69.6, 218.0], [69.7, 218.0], [69.8, 219.0], [69.9, 219.0], [70.0, 219.0], [70.1, 219.0], [70.2, 220.0], [70.3, 220.0], [70.4, 221.0], [70.5, 221.0], [70.6, 221.0], [70.7, 222.0], [70.8, 222.0], [70.9, 222.0], [71.0, 223.0], [71.1, 223.0], [71.2, 224.0], [71.3, 224.0], [71.4, 224.0], [71.5, 225.0], [71.6, 225.0], [71.7, 225.0], [71.8, 226.0], [71.9, 226.0], [72.0, 226.0], [72.1, 228.0], [72.2, 228.0], [72.3, 229.0], [72.4, 229.0], [72.5, 230.0], [72.6, 231.0], [72.7, 232.0], [72.8, 233.0], [72.9, 234.0], [73.0, 235.0], [73.1, 235.0], [73.2, 236.0], [73.3, 236.0], [73.4, 236.0], [73.5, 237.0], [73.6, 238.0], [73.7, 238.0], [73.8, 239.0], [73.9, 240.0], [74.0, 241.0], [74.1, 241.0], [74.2, 241.0], [74.3, 242.0], [74.4, 245.0], [74.5, 247.0], [74.6, 247.0], [74.7, 247.0], [74.8, 248.0], [74.9, 248.0], [75.0, 250.0], [75.1, 251.0], [75.2, 252.0], [75.3, 253.0], [75.4, 254.0], [75.5, 255.0], [75.6, 255.0], [75.7, 255.0], [75.8, 256.0], [75.9, 256.0], [76.0, 257.0], [76.1, 258.0], [76.2, 259.0], [76.3, 260.0], [76.4, 264.0], [76.5, 266.0], [76.6, 267.0], [76.7, 268.0], [76.8, 270.0], [76.9, 270.0], [77.0, 272.0], [77.1, 273.0], [77.2, 274.0], [77.3, 275.0], [77.4, 276.0], [77.5, 277.0], [77.6, 277.0], [77.7, 279.0], [77.8, 280.0], [77.9, 281.0], [78.0, 284.0], [78.1, 286.0], [78.2, 286.0], [78.3, 289.0], [78.4, 290.0], [78.5, 293.0], [78.6, 299.0], [78.7, 300.0], [78.8, 306.0], [78.9, 306.0], [79.0, 307.0], [79.1, 309.0], [79.2, 309.0], [79.3, 313.0], [79.4, 314.0], [79.5, 319.0], [79.6, 327.0], [79.7, 328.0], [79.8, 329.0], [79.9, 332.0], [80.0, 340.0], [80.1, 340.0], [80.2, 342.0], [80.3, 348.0], [80.4, 360.0], [80.5, 362.0], [80.6, 365.0], [80.7, 365.0], [80.8, 368.0], [80.9, 369.0], [81.0, 370.0], [81.1, 371.0], [81.2, 375.0], [81.3, 404.0], [81.4, 434.0], [81.5, 444.0], [81.6, 448.0], [81.7, 469.0], [81.8, 533.0], [81.9, 590.0], [82.0, 661.0], [82.1, 662.0], [82.2, 687.0], [82.3, 751.0], [82.4, 758.0], [82.5, 796.0], [82.6, 811.0], [82.7, 811.0], [82.8, 930.0], [82.9, 1108.0], [83.0, 1132.0], [83.1, 1137.0], [83.2, 1158.0], [83.3, 1167.0], [83.4, 1177.0], [83.5, 1191.0], [83.6, 1198.0], [83.7, 1208.0], [83.8, 1221.0], [83.9, 1225.0], [84.0, 1233.0], [84.1, 1233.0], [84.2, 1249.0], [84.3, 1274.0], [84.4, 1277.0], [84.5, 1285.0], [84.6, 1286.0], [84.7, 1299.0], [84.8, 1318.0], [84.9, 1324.0], [85.0, 1329.0], [85.1, 1349.0], [85.2, 1360.0], [85.3, 1379.0], [85.4, 1381.0], [85.5, 1391.0], [85.6, 1394.0], [85.7, 1404.0], [85.8, 1416.0], [85.9, 1418.0], [86.0, 1427.0], [86.1, 1431.0], [86.2, 1432.0], [86.3, 1454.0], [86.4, 1459.0], [86.5, 1464.0], [86.6, 1494.0], [86.7, 1504.0], [86.8, 1509.0], [86.9, 1515.0], [87.0, 1521.0], [87.1, 1528.0], [87.2, 1554.0], [87.3, 1566.0], [87.4, 1584.0], [87.5, 1591.0], [87.6, 1593.0], [87.7, 1606.0], [87.8, 1630.0], [87.9, 1640.0], [88.0, 1658.0], [88.1, 1667.0], [88.2, 1674.0], [88.3, 1688.0], [88.4, 1692.0], [88.5, 1721.0], [88.6, 1728.0], [88.7, 1728.0], [88.8, 1730.0], [88.9, 1742.0], [89.0, 1786.0], [89.1, 1805.0], [89.2, 1825.0], [89.3, 1857.0], [89.4, 1863.0], [89.5, 1926.0], [89.6, 1938.0], [89.7, 1976.0], [89.8, 1977.0], [89.9, 2007.0], [90.0, 2051.0], [90.1, 2086.0], [90.2, 2124.0], [90.3, 2168.0], [90.4, 2181.0], [90.5, 2203.0], [90.6, 2203.0], [90.7, 2205.0], [90.8, 2355.0], [90.9, 2394.0], [91.0, 2481.0], [91.1, 2565.0], [91.2, 2587.0], [91.3, 2591.0], [91.4, 2598.0], [91.5, 2648.0], [91.6, 2657.0], [91.7, 2666.0], [91.8, 2764.0], [91.9, 2770.0], [92.0, 2825.0], [92.1, 2867.0], [92.2, 2914.0], [92.3, 2969.0], [92.4, 3026.0], [92.5, 3053.0], [92.6, 3080.0], [92.7, 3080.0], [92.8, 3230.0], [92.9, 3395.0], [93.0, 3419.0], [93.1, 3439.0], [93.2, 3449.0], [93.3, 3461.0], [93.4, 3465.0], [93.5, 3478.0], [93.6, 3481.0], [93.7, 3640.0], [93.8, 3714.0], [93.9, 3741.0], [94.0, 3879.0], [94.1, 3888.0], [94.2, 3902.0], [94.3, 4018.0], [94.4, 4053.0], [94.5, 4203.0], [94.6, 4212.0], [94.7, 4214.0], [94.8, 4234.0], [94.9, 4272.0], [95.0, 4312.0], [95.1, 4428.0], [95.2, 4558.0], [95.3, 4920.0], [95.4, 4952.0], [95.5, 5019.0], [95.6, 5024.0], [95.7, 5048.0], [95.8, 5356.0], [95.9, 5427.0], [96.0, 5522.0], [96.1, 5577.0], [96.2, 5646.0], [96.3, 5703.0], [96.4, 5791.0], [96.5, 5823.0], [96.6, 5847.0], [96.7, 5908.0], [96.8, 5958.0], [96.9, 5990.0], [97.0, 6275.0], [97.1, 6587.0], [97.2, 6910.0], [97.3, 7010.0], [97.4, 7017.0], [97.5, 8461.0], [97.6, 8953.0], [97.7, 9112.0], [97.8, 9625.0], [97.9, 10379.0], [98.0, 11155.0], [98.1, 11213.0], [98.2, 11823.0], [98.3, 12130.0], [98.4, 13378.0], [98.5, 14804.0], [98.6, 15215.0], [98.7, 16051.0], [98.8, 17123.0], [98.9, 23758.0], [99.0, 30009.0], [99.1, 30010.0], [99.2, 30012.0], [99.3, 30017.0], [99.4, 30017.0], [99.5, 31014.0], [99.6, 31226.0], [99.7, 47634.0], [99.8, 117560.0], [99.9, 132582.0]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[0.0, 89.0], [0.1, 92.0], [0.2, 92.0], [0.3, 93.0], [0.4, 94.0], [0.5, 96.0], [0.6, 97.0], [0.7, 97.0], [0.8, 98.0], [0.9, 99.0], [1.0, 99.0], [1.1, 100.0], [1.2, 100.0], [1.3, 101.0], [1.4, 101.0], [1.5, 102.0], [1.6, 102.0], [1.7, 102.0], [1.8, 103.0], [1.9, 103.0], [2.0, 103.0], [2.1, 104.0], [2.2, 104.0], [2.3, 104.0], [2.4, 105.0], [2.5, 107.0], [2.6, 107.0], [2.7, 107.0], [2.8, 107.0], [2.9, 108.0], [3.0, 108.0], [3.1, 109.0], [3.2, 109.0], [3.3, 109.0], [3.4, 109.0], [3.5, 109.0], [3.6, 109.0], [3.7, 110.0], [3.8, 110.0], [3.9, 110.0], [4.0, 111.0], [4.1, 111.0], [4.2, 111.0], [4.3, 111.0], [4.4, 111.0], [4.5, 112.0], [4.6, 112.0], [4.7, 112.0], [4.8, 112.0], [4.9, 113.0], [5.0, 113.0], [5.1, 113.0], [5.2, 113.0], [5.3, 113.0], [5.4, 114.0], [5.5, 114.0], [5.6, 114.0], [5.7, 115.0], [5.8, 115.0], [5.9, 115.0], [6.0, 117.0], [6.1, 117.0], [6.2, 117.0], [6.3, 117.0], [6.4, 117.0], [6.5, 117.0], [6.6, 118.0], [6.7, 118.0], [6.8, 118.0], [6.9, 118.0], [7.0, 118.0], [7.1, 118.0], [7.2, 119.0], [7.3, 120.0], [7.4, 120.0], [7.5, 120.0], [7.6, 120.0], [7.7, 121.0], [7.8, 122.0], [7.9, 122.0], [8.0, 122.0], [8.1, 123.0], [8.2, 123.0], [8.3, 124.0], [8.4, 124.0], [8.5, 124.0], [8.6, 124.0], [8.7, 124.0], [8.8, 124.0], [8.9, 124.0], [9.0, 125.0], [9.1, 125.0], [9.2, 125.0], [9.3, 125.0], [9.4, 126.0], [9.5, 126.0], [9.6, 126.0], [9.7, 127.0], [9.8, 128.0], [9.9, 128.0], [10.0, 129.0], [10.1, 129.0], [10.2, 129.0], [10.3, 129.0], [10.4, 129.0], [10.5, 129.0], [10.6, 130.0], [10.7, 130.0], [10.8, 130.0], [10.9, 131.0], [11.0, 131.0], [11.1, 131.0], [11.2, 131.0], [11.3, 131.0], [11.4, 131.0], [11.5, 132.0], [11.6, 132.0], [11.7, 132.0], [11.8, 132.0], [11.9, 132.0], [12.0, 133.0], [12.1, 133.0], [12.2, 133.0], [12.3, 133.0], [12.4, 133.0], [12.5, 133.0], [12.6, 133.0], [12.7, 133.0], [12.8, 134.0], [12.9, 134.0], [13.0, 134.0], [13.1, 134.0], [13.2, 134.0], [13.3, 135.0], [13.4, 135.0], [13.5, 135.0], [13.6, 135.0], [13.7, 135.0], [13.8, 136.0], [13.9, 136.0], [14.0, 136.0], [14.1, 136.0], [14.2, 137.0], [14.3, 137.0], [14.4, 138.0], [14.5, 138.0], [14.6, 138.0], [14.7, 138.0], [14.8, 139.0], [14.9, 139.0], [15.0, 139.0], [15.1, 139.0], [15.2, 139.0], [15.3, 139.0], [15.4, 139.0], [15.5, 139.0], [15.6, 140.0], [15.7, 140.0], [15.8, 140.0], [15.9, 140.0], [16.0, 140.0], [16.1, 141.0], [16.2, 141.0], [16.3, 141.0], [16.4, 141.0], [16.5, 141.0], [16.6, 141.0], [16.7, 142.0], [16.8, 142.0], [16.9, 142.0], [17.0, 142.0], [17.1, 142.0], [17.2, 142.0], [17.3, 142.0], [17.4, 143.0], [17.5, 143.0], [17.6, 143.0], [17.7, 143.0], [17.8, 143.0], [17.9, 143.0], [18.0, 144.0], [18.1, 144.0], [18.2, 144.0], [18.3, 144.0], [18.4, 144.0], [18.5, 144.0], [18.6, 145.0], [18.7, 145.0], [18.8, 145.0], [18.9, 145.0], [19.0, 145.0], [19.1, 145.0], [19.2, 145.0], [19.3, 145.0], [19.4, 146.0], [19.5, 146.0], [19.6, 146.0], [19.7, 146.0], [19.8, 147.0], [19.9, 147.0], [20.0, 147.0], [20.1, 147.0], [20.2, 147.0], [20.3, 147.0], [20.4, 147.0], [20.5, 148.0], [20.6, 148.0], [20.7, 148.0], [20.8, 148.0], [20.9, 148.0], [21.0, 148.0], [21.1, 148.0], [21.2, 149.0], [21.3, 149.0], [21.4, 149.0], [21.5, 149.0], [21.6, 149.0], [21.7, 149.0], [21.8, 149.0], [21.9, 149.0], [22.0, 150.0], [22.1, 150.0], [22.2, 150.0], [22.3, 150.0], [22.4, 150.0], [22.5, 150.0], [22.6, 150.0], [22.7, 150.0], [22.8, 150.0], [22.9, 151.0], [23.0, 151.0], [23.1, 151.0], [23.2, 151.0], [23.3, 151.0], [23.4, 151.0], [23.5, 152.0], [23.6, 152.0], [23.7, 152.0], [23.8, 152.0], [23.9, 152.0], [24.0, 152.0], [24.1, 152.0], [24.2, 152.0], [24.3, 153.0], [24.4, 153.0], [24.5, 153.0], [24.6, 153.0], [24.7, 153.0], [24.8, 153.0], [24.9, 153.0], [25.0, 153.0], [25.1, 153.0], [25.2, 153.0], [25.3, 153.0], [25.4, 153.0], [25.5, 153.0], [25.6, 154.0], [25.7, 154.0], [25.8, 154.0], [25.9, 154.0], [26.0, 154.0], [26.1, 154.0], [26.2, 154.0], [26.3, 154.0], [26.4, 154.0], [26.5, 155.0], [26.6, 155.0], [26.7, 155.0], [26.8, 155.0], [26.9, 155.0], [27.0, 156.0], [27.1, 156.0], [27.2, 156.0], [27.3, 156.0], [27.4, 156.0], [27.5, 156.0], [27.6, 156.0], [27.7, 156.0], [27.8, 156.0], [27.9, 156.0], [28.0, 156.0], [28.1, 156.0], [28.2, 156.0], [28.3, 156.0], [28.4, 156.0], [28.5, 157.0], [28.6, 157.0], [28.7, 157.0], [28.8, 157.0], [28.9, 157.0], [29.0, 157.0], [29.1, 157.0], [29.2, 157.0], [29.3, 157.0], [29.4, 157.0], [29.5, 157.0], [29.6, 158.0], [29.7, 158.0], [29.8, 158.0], [29.9, 158.0], [30.0, 158.0], [30.1, 158.0], [30.2, 158.0], [30.3, 158.0], [30.4, 158.0], [30.5, 158.0], [30.6, 158.0], [30.7, 158.0], [30.8, 158.0], [30.9, 159.0], [31.0, 159.0], [31.1, 159.0], [31.2, 159.0], [31.3, 159.0], [31.4, 159.0], [31.5, 159.0], [31.6, 160.0], [31.7, 160.0], [31.8, 160.0], [31.9, 160.0], [32.0, 160.0], [32.1, 160.0], [32.2, 160.0], [32.3, 160.0], [32.4, 160.0], [32.5, 160.0], [32.6, 160.0], [32.7, 160.0], [32.8, 161.0], [32.9, 161.0], [33.0, 161.0], [33.1, 161.0], [33.2, 161.0], [33.3, 161.0], [33.4, 161.0], [33.5, 161.0], [33.6, 161.0], [33.7, 161.0], [33.8, 162.0], [33.9, 162.0], [34.0, 162.0], [34.1, 162.0], [34.2, 162.0], [34.3, 162.0], [34.4, 162.0], [34.5, 162.0], [34.6, 162.0], [34.7, 163.0], [34.8, 163.0], [34.9, 163.0], [35.0, 163.0], [35.1, 163.0], [35.2, 163.0], [35.3, 163.0], [35.4, 163.0], [35.5, 163.0], [35.6, 163.0], [35.7, 163.0], [35.8, 163.0], [35.9, 164.0], [36.0, 164.0], [36.1, 164.0], [36.2, 164.0], [36.3, 164.0], [36.4, 164.0], [36.5, 164.0], [36.6, 164.0], [36.7, 164.0], [36.8, 164.0], [36.9, 164.0], [37.0, 164.0], [37.1, 165.0], [37.2, 165.0], [37.3, 165.0], [37.4, 165.0], [37.5, 165.0], [37.6, 165.0], [37.7, 165.0], [37.8, 165.0], [37.9, 165.0], [38.0, 165.0], [38.1, 165.0], [38.2, 166.0], [38.3, 166.0], [38.4, 166.0], [38.5, 166.0], [38.6, 166.0], [38.7, 166.0], [38.8, 166.0], [38.9, 166.0], [39.0, 166.0], [39.1, 167.0], [39.2, 167.0], [39.3, 167.0], [39.4, 167.0], [39.5, 167.0], [39.6, 167.0], [39.7, 168.0], [39.8, 168.0], [39.9, 168.0], [40.0, 168.0], [40.1, 168.0], [40.2, 168.0], [40.3, 168.0], [40.4, 168.0], [40.5, 169.0], [40.6, 169.0], [40.7, 169.0], [40.8, 169.0], [40.9, 169.0], [41.0, 169.0], [41.1, 169.0], [41.2, 169.0], [41.3, 170.0], [41.4, 170.0], [41.5, 170.0], [41.6, 170.0], [41.7, 170.0], [41.8, 170.0], [41.9, 170.0], [42.0, 170.0], [42.1, 170.0], [42.2, 170.0], [42.3, 170.0], [42.4, 170.0], [42.5, 170.0], [42.6, 170.0], [42.7, 171.0], [42.8, 171.0], [42.9, 171.0], [43.0, 171.0], [43.1, 171.0], [43.2, 171.0], [43.3, 171.0], [43.4, 172.0], [43.5, 172.0], [43.6, 172.0], [43.7, 172.0], [43.8, 172.0], [43.9, 172.0], [44.0, 172.0], [44.1, 172.0], [44.2, 172.0], [44.3, 172.0], [44.4, 172.0], [44.5, 173.0], [44.6, 173.0], [44.7, 173.0], [44.8, 173.0], [44.9, 173.0], [45.0, 173.0], [45.1, 173.0], [45.2, 173.0], [45.3, 173.0], [45.4, 174.0], [45.5, 174.0], [45.6, 174.0], [45.7, 174.0], [45.8, 174.0], [45.9, 174.0], [46.0, 174.0], [46.1, 174.0], [46.2, 174.0], [46.3, 174.0], [46.4, 174.0], [46.5, 175.0], [46.6, 175.0], [46.7, 175.0], [46.8, 175.0], [46.9, 175.0], [47.0, 175.0], [47.1, 175.0], [47.2, 175.0], [47.3, 175.0], [47.4, 176.0], [47.5, 176.0], [47.6, 176.0], [47.7, 176.0], [47.8, 176.0], [47.9, 176.0], [48.0, 176.0], [48.1, 176.0], [48.2, 177.0], [48.3, 177.0], [48.4, 177.0], [48.5, 177.0], [48.6, 177.0], [48.7, 178.0], [48.8, 178.0], [48.9, 178.0], [49.0, 178.0], [49.1, 178.0], [49.2, 178.0], [49.3, 178.0], [49.4, 178.0], [49.5, 178.0], [49.6, 178.0], [49.7, 178.0], [49.8, 178.0], [49.9, 179.0], [50.0, 179.0], [50.1, 179.0], [50.2, 179.0], [50.3, 179.0], [50.4, 179.0], [50.5, 179.0], [50.6, 179.0], [50.7, 179.0], [50.8, 179.0], [50.9, 179.0], [51.0, 180.0], [51.1, 180.0], [51.2, 180.0], [51.3, 180.0], [51.4, 180.0], [51.5, 180.0], [51.6, 181.0], [51.7, 181.0], [51.8, 181.0], [51.9, 181.0], [52.0, 181.0], [52.1, 181.0], [52.2, 182.0], [52.3, 182.0], [52.4, 182.0], [52.5, 182.0], [52.6, 182.0], [52.7, 182.0], [52.8, 183.0], [52.9, 183.0], [53.0, 183.0], [53.1, 183.0], [53.2, 183.0], [53.3, 183.0], [53.4, 184.0], [53.5, 184.0], [53.6, 184.0], [53.7, 184.0], [53.8, 184.0], [53.9, 184.0], [54.0, 185.0], [54.1, 185.0], [54.2, 185.0], [54.3, 185.0], [54.4, 185.0], [54.5, 185.0], [54.6, 185.0], [54.7, 185.0], [54.8, 185.0], [54.9, 185.0], [55.0, 185.0], [55.1, 186.0], [55.2, 186.0], [55.3, 186.0], [55.4, 186.0], [55.5, 186.0], [55.6, 186.0], [55.7, 186.0], [55.8, 186.0], [55.9, 186.0], [56.0, 186.0], [56.1, 187.0], [56.2, 187.0], [56.3, 187.0], [56.4, 187.0], [56.5, 187.0], [56.6, 187.0], [56.7, 187.0], [56.8, 187.0], [56.9, 187.0], [57.0, 188.0], [57.1, 188.0], [57.2, 188.0], [57.3, 188.0], [57.4, 188.0], [57.5, 188.0], [57.6, 188.0], [57.7, 188.0], [57.8, 189.0], [57.9, 189.0], [58.0, 189.0], [58.1, 189.0], [58.2, 189.0], [58.3, 190.0], [58.4, 190.0], [58.5, 190.0], [58.6, 190.0], [58.7, 190.0], [58.8, 190.0], [58.9, 190.0], [59.0, 190.0], [59.1, 191.0], [59.2, 191.0], [59.3, 191.0], [59.4, 191.0], [59.5, 191.0], [59.6, 191.0], [59.7, 191.0], [59.8, 192.0], [59.9, 192.0], [60.0, 192.0], [60.1, 193.0], [60.2, 193.0], [60.3, 193.0], [60.4, 193.0], [60.5, 193.0], [60.6, 193.0], [60.7, 193.0], [60.8, 194.0], [60.9, 194.0], [61.0, 194.0], [61.1, 194.0], [61.2, 194.0], [61.3, 194.0], [61.4, 194.0], [61.5, 194.0], [61.6, 195.0], [61.7, 195.0], [61.8, 195.0], [61.9, 195.0], [62.0, 195.0], [62.1, 195.0], [62.2, 195.0], [62.3, 195.0], [62.4, 196.0], [62.5, 196.0], [62.6, 196.0], [62.7, 196.0], [62.8, 196.0], [62.9, 196.0], [63.0, 197.0], [63.1, 197.0], [63.2, 197.0], [63.3, 197.0], [63.4, 197.0], [63.5, 197.0], [63.6, 197.0], [63.7, 198.0], [63.8, 198.0], [63.9, 198.0], [64.0, 198.0], [64.1, 199.0], [64.2, 199.0], [64.3, 199.0], [64.4, 199.0], [64.5, 199.0], [64.6, 200.0], [64.7, 200.0], [64.8, 200.0], [64.9, 200.0], [65.0, 201.0], [65.1, 201.0], [65.2, 201.0], [65.3, 201.0], [65.4, 202.0], [65.5, 202.0], [65.6, 202.0], [65.7, 202.0], [65.8, 202.0], [65.9, 203.0], [66.0, 203.0], [66.1, 203.0], [66.2, 203.0], [66.3, 203.0], [66.4, 203.0], [66.5, 203.0], [66.6, 203.0], [66.7, 204.0], [66.8, 204.0], [66.9, 204.0], [67.0, 204.0], [67.1, 204.0], [67.2, 204.0], [67.3, 205.0], [67.4, 205.0], [67.5, 205.0], [67.6, 205.0], [67.7, 205.0], [67.8, 205.0], [67.9, 206.0], [68.0, 206.0], [68.1, 206.0], [68.2, 207.0], [68.3, 207.0], [68.4, 208.0], [68.5, 208.0], [68.6, 208.0], [68.7, 208.0], [68.8, 209.0], [68.9, 209.0], [69.0, 209.0], [69.1, 209.0], [69.2, 209.0], [69.3, 210.0], [69.4, 210.0], [69.5, 210.0], [69.6, 210.0], [69.7, 210.0], [69.8, 211.0], [69.9, 211.0], [70.0, 211.0], [70.1, 211.0], [70.2, 211.0], [70.3, 212.0], [70.4, 212.0], [70.5, 213.0], [70.6, 213.0], [70.7, 213.0], [70.8, 214.0], [70.9, 214.0], [71.0, 215.0], [71.1, 215.0], [71.2, 216.0], [71.3, 216.0], [71.4, 217.0], [71.5, 217.0], [71.6, 217.0], [71.7, 217.0], [71.8, 217.0], [71.9, 217.0], [72.0, 218.0], [72.1, 218.0], [72.2, 218.0], [72.3, 218.0], [72.4, 218.0], [72.5, 219.0], [72.6, 219.0], [72.7, 219.0], [72.8, 219.0], [72.9, 219.0], [73.0, 220.0], [73.1, 221.0], [73.2, 221.0], [73.3, 221.0], [73.4, 221.0], [73.5, 222.0], [73.6, 222.0], [73.7, 222.0], [73.8, 224.0], [73.9, 224.0], [74.0, 225.0], [74.1, 225.0], [74.2, 225.0], [74.3, 226.0], [74.4, 226.0], [74.5, 227.0], [74.6, 228.0], [74.7, 228.0], [74.8, 228.0], [74.9, 228.0], [75.0, 229.0], [75.1, 229.0], [75.2, 229.0], [75.3, 229.0], [75.4, 230.0], [75.5, 231.0], [75.6, 231.0], [75.7, 231.0], [75.8, 233.0], [75.9, 234.0], [76.0, 234.0], [76.1, 234.0], [76.2, 235.0], [76.3, 237.0], [76.4, 237.0], [76.5, 237.0], [76.6, 238.0], [76.7, 238.0], [76.8, 240.0], [76.9, 240.0], [77.0, 241.0], [77.1, 241.0], [77.2, 242.0], [77.3, 243.0], [77.4, 244.0], [77.5, 246.0], [77.6, 247.0], [77.7, 247.0], [77.8, 249.0], [77.9, 250.0], [78.0, 251.0], [78.1, 252.0], [78.2, 253.0], [78.3, 255.0], [78.4, 255.0], [78.5, 257.0], [78.6, 257.0], [78.7, 257.0], [78.8, 259.0], [78.9, 262.0], [79.0, 265.0], [79.1, 265.0], [79.2, 266.0], [79.3, 270.0], [79.4, 270.0], [79.5, 274.0], [79.6, 277.0], [79.7, 279.0], [79.8, 282.0], [79.9, 282.0], [80.0, 286.0], [80.1, 287.0], [80.2, 288.0], [80.3, 291.0], [80.4, 291.0], [80.5, 295.0], [80.6, 295.0], [80.7, 298.0], [80.8, 305.0], [80.9, 307.0], [81.0, 307.0], [81.1, 309.0], [81.2, 312.0], [81.3, 316.0], [81.4, 321.0], [81.5, 324.0], [81.6, 326.0], [81.7, 331.0], [81.8, 337.0], [81.9, 347.0], [82.0, 353.0], [82.1, 363.0], [82.2, 364.0], [82.3, 381.0], [82.4, 384.0], [82.5, 389.0], [82.6, 392.0], [82.7, 402.0], [82.8, 419.0], [82.9, 425.0], [83.0, 435.0], [83.1, 450.0], [83.2, 453.0], [83.3, 539.0], [83.4, 544.0], [83.5, 601.0], [83.6, 677.0], [83.7, 808.0], [83.8, 825.0], [83.9, 826.0], [84.0, 849.0], [84.1, 880.0], [84.2, 996.0], [84.3, 1021.0], [84.4, 1129.0], [84.5, 1167.0], [84.6, 1174.0], [84.7, 1177.0], [84.8, 1194.0], [84.9, 1194.0], [85.0, 1206.0], [85.1, 1208.0], [85.2, 1212.0], [85.3, 1221.0], [85.4, 1237.0], [85.5, 1248.0], [85.6, 1250.0], [85.7, 1250.0], [85.8, 1286.0], [85.9, 1287.0], [86.0, 1312.0], [86.1, 1314.0], [86.2, 1315.0], [86.3, 1323.0], [86.4, 1329.0], [86.5, 1342.0], [86.6, 1343.0], [86.7, 1369.0], [86.8, 1372.0], [86.9, 1374.0], [87.0, 1393.0], [87.1, 1411.0], [87.2, 1417.0], [87.3, 1424.0], [87.4, 1429.0], [87.5, 1437.0], [87.6, 1442.0], [87.7, 1443.0], [87.8, 1461.0], [87.9, 1466.0], [88.0, 1496.0], [88.1, 1511.0], [88.2, 1545.0], [88.3, 1559.0], [88.4, 1562.0], [88.5, 1575.0], [88.6, 1576.0], [88.7, 1592.0], [88.8, 1605.0], [88.9, 1609.0], [89.0, 1626.0], [89.1, 1627.0], [89.2, 1640.0], [89.3, 1683.0], [89.4, 1686.0], [89.5, 1711.0], [89.6, 1748.0], [89.7, 1752.0], [89.8, 1754.0], [89.9, 1755.0], [90.0, 1765.0], [90.1, 1777.0], [90.2, 1836.0], [90.3, 1895.0], [90.4, 1895.0], [90.5, 1965.0], [90.6, 1976.0], [90.7, 1984.0], [90.8, 1997.0], [90.9, 1997.0], [91.0, 2006.0], [91.1, 2047.0], [91.2, 2094.0], [91.3, 2129.0], [91.4, 2178.0], [91.5, 2215.0], [91.6, 2221.0], [91.7, 2224.0], [91.8, 2325.0], [91.9, 2401.0], [92.0, 2460.0], [92.1, 2473.0], [92.2, 2481.0], [92.3, 2502.0], [92.4, 2518.0], [92.5, 2590.0], [92.6, 2652.0], [92.7, 2664.0], [92.8, 2711.0], [92.9, 2716.0], [93.0, 2727.0], [93.1, 2747.0], [93.2, 2856.0], [93.3, 3026.0], [93.4, 3169.0], [93.5, 3339.0], [93.6, 3362.0], [93.7, 3379.0], [93.8, 3443.0], [93.9, 3456.0], [94.0, 3481.0], [94.1, 3494.0], [94.2, 3517.0], [94.3, 3741.0], [94.4, 3787.0], [94.5, 3897.0], [94.6, 3931.0], [94.7, 3979.0], [94.8, 4011.0], [94.9, 4013.0], [95.0, 4107.0], [95.1, 4114.0], [95.2, 4132.0], [95.3, 4141.0], [95.4, 4182.0], [95.5, 4229.0], [95.6, 4242.0], [95.7, 4272.0], [95.8, 4329.0], [95.9, 4341.0], [96.0, 4502.0], [96.1, 4653.0], [96.2, 4760.0], [96.3, 5052.0], [96.4, 5060.0], [96.5, 5229.0], [96.6, 5464.0], [96.7, 5505.0], [96.8, 5750.0], [96.9, 5805.0], [97.0, 5998.0], [97.1, 6079.0], [97.2, 6324.0], [97.3, 6641.0], [97.4, 6697.0], [97.5, 7389.0], [97.6, 7401.0], [97.7, 7472.0], [97.8, 8461.0], [97.9, 8466.0], [98.0, 9205.0], [98.1, 9541.0], [98.2, 9583.0], [98.3, 9797.0], [98.4, 10609.0], [98.5, 11351.0], [98.6, 11761.0], [98.7, 11943.0], [98.8, 14020.0], [98.9, 15250.0], [99.0, 15507.0], [99.1, 15954.0], [99.2, 17461.0], [99.3, 22155.0], [99.4, 25954.0], [99.5, 30012.0], [99.6, 30028.0], [99.7, 31658.0], [99.8, 36411.0], [99.9, 68895.0]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[0.0, 41.0], [0.1, 41.0], [0.2, 41.0], [0.3, 42.0], [0.4, 42.0], [0.5, 43.0], [0.6, 43.0], [0.7, 43.0], [0.8, 43.0], [0.9, 43.0], [1.0, 44.0], [1.1, 44.0], [1.2, 44.0], [1.3, 44.0], [1.4, 45.0], [1.5, 46.0], [1.6, 46.0], [1.7, 46.0], [1.8, 47.0], [1.9, 47.0], [2.0, 47.0], [2.1, 48.0], [2.2, 48.0], [2.3, 48.0], [2.4, 48.0], [2.5, 49.0], [2.6, 49.0], [2.7, 49.0], [2.8, 49.0], [2.9, 49.0], [3.0, 49.0], [3.1, 50.0], [3.2, 50.0], [3.3, 50.0], [3.4, 50.0], [3.5, 50.0], [3.6, 50.0], [3.7, 51.0], [3.8, 51.0], [3.9, 51.0], [4.0, 51.0], [4.1, 51.0], [4.2, 52.0], [4.3, 52.0], [4.4, 52.0], [4.5, 53.0], [4.6, 53.0], [4.7, 53.0], [4.8, 53.0], [4.9, 54.0], [5.0, 54.0], [5.1, 54.0], [5.2, 54.0], [5.3, 54.0], [5.4, 54.0], [5.5, 55.0], [5.6, 55.0], [5.7, 55.0], [5.8, 55.0], [5.9, 55.0], [6.0, 55.0], [6.1, 55.0], [6.2, 56.0], [6.3, 56.0], [6.4, 57.0], [6.5, 57.0], [6.6, 57.0], [6.7, 57.0], [6.8, 58.0], [6.9, 58.0], [7.0, 59.0], [7.1, 59.0], [7.2, 59.0], [7.3, 59.0], [7.4, 59.0], [7.5, 60.0], [7.6, 60.0], [7.7, 60.0], [7.8, 61.0], [7.9, 61.0], [8.0, 61.0], [8.1, 62.0], [8.2, 62.0], [8.3, 62.0], [8.4, 62.0], [8.5, 63.0], [8.6, 63.0], [8.7, 64.0], [8.8, 64.0], [8.9, 65.0], [9.0, 66.0], [9.1, 66.0], [9.2, 66.0], [9.3, 66.0], [9.4, 66.0], [9.5, 67.0], [9.6, 67.0], [9.7, 67.0], [9.8, 68.0], [9.9, 68.0], [10.0, 68.0], [10.1, 69.0], [10.2, 69.0], [10.3, 69.0], [10.4, 69.0], [10.5, 69.0], [10.6, 70.0], [10.7, 70.0], [10.8, 70.0], [10.9, 70.0], [11.0, 71.0], [11.1, 71.0], [11.2, 71.0], [11.3, 71.0], [11.4, 71.0], [11.5, 72.0], [11.6, 72.0], [11.7, 72.0], [11.8, 72.0], [11.9, 72.0], [12.0, 73.0], [12.1, 73.0], [12.2, 73.0], [12.3, 73.0], [12.4, 74.0], [12.5, 74.0], [12.6, 74.0], [12.7, 74.0], [12.8, 74.0], [12.9, 74.0], [13.0, 75.0], [13.1, 75.0], [13.2, 75.0], [13.3, 76.0], [13.4, 76.0], [13.5, 76.0], [13.6, 77.0], [13.7, 77.0], [13.8, 78.0], [13.9, 78.0], [14.0, 78.0], [14.1, 78.0], [14.2, 79.0], [14.3, 79.0], [14.4, 79.0], [14.5, 79.0], [14.6, 79.0], [14.7, 80.0], [14.8, 80.0], [14.9, 80.0], [15.0, 80.0], [15.1, 80.0], [15.2, 80.0], [15.3, 80.0], [15.4, 81.0], [15.5, 81.0], [15.6, 81.0], [15.7, 81.0], [15.8, 82.0], [15.9, 82.0], [16.0, 82.0], [16.1, 82.0], [16.2, 82.0], [16.3, 82.0], [16.4, 82.0], [16.5, 82.0], [16.6, 82.0], [16.7, 83.0], [16.8, 83.0], [16.9, 83.0], [17.0, 83.0], [17.1, 83.0], [17.2, 83.0], [17.3, 84.0], [17.4, 84.0], [17.5, 84.0], [17.6, 84.0], [17.7, 85.0], [17.8, 85.0], [17.9, 85.0], [18.0, 85.0], [18.1, 85.0], [18.2, 86.0], [18.3, 86.0], [18.4, 86.0], [18.5, 86.0], [18.6, 86.0], [18.7, 86.0], [18.8, 87.0], [18.9, 87.0], [19.0, 87.0], [19.1, 87.0], [19.2, 87.0], [19.3, 87.0], [19.4, 87.0], [19.5, 87.0], [19.6, 88.0], [19.7, 88.0], [19.8, 88.0], [19.9, 88.0], [20.0, 88.0], [20.1, 88.0], [20.2, 88.0], [20.3, 89.0], [20.4, 89.0], [20.5, 89.0], [20.6, 89.0], [20.7, 89.0], [20.8, 89.0], [20.9, 89.0], [21.0, 89.0], [21.1, 89.0], [21.2, 89.0], [21.3, 90.0], [21.4, 90.0], [21.5, 90.0], [21.6, 90.0], [21.7, 90.0], [21.8, 90.0], [21.9, 90.0], [22.0, 90.0], [22.1, 90.0], [22.2, 90.0], [22.3, 90.0], [22.4, 90.0], [22.5, 90.0], [22.6, 91.0], [22.7, 91.0], [22.8, 91.0], [22.9, 91.0], [23.0, 91.0], [23.1, 91.0], [23.2, 92.0], [23.3, 92.0], [23.4, 92.0], [23.5, 92.0], [23.6, 92.0], [23.7, 92.0], [23.8, 92.0], [23.9, 92.0], [24.0, 92.0], [24.1, 93.0], [24.2, 93.0], [24.3, 93.0], [24.4, 93.0], [24.5, 93.0], [24.6, 93.0], [24.7, 94.0], [24.8, 94.0], [24.9, 94.0], [25.0, 94.0], [25.1, 94.0], [25.2, 94.0], [25.3, 94.0], [25.4, 94.0], [25.5, 94.0], [25.6, 94.0], [25.7, 94.0], [25.8, 95.0], [25.9, 95.0], [26.0, 95.0], [26.1, 95.0], [26.2, 95.0], [26.3, 95.0], [26.4, 95.0], [26.5, 95.0], [26.6, 96.0], [26.7, 96.0], [26.8, 96.0], [26.9, 96.0], [27.0, 96.0], [27.1, 96.0], [27.2, 96.0], [27.3, 96.0], [27.4, 96.0], [27.5, 97.0], [27.6, 97.0], [27.7, 97.0], [27.8, 97.0], [27.9, 97.0], [28.0, 97.0], [28.1, 97.0], [28.2, 98.0], [28.3, 98.0], [28.4, 98.0], [28.5, 98.0], [28.6, 98.0], [28.7, 98.0], [28.8, 98.0], [28.9, 98.0], [29.0, 98.0], [29.1, 98.0], [29.2, 98.0], [29.3, 98.0], [29.4, 98.0], [29.5, 99.0], [29.6, 99.0], [29.7, 99.0], [29.8, 99.0], [29.9, 99.0], [30.0, 99.0], [30.1, 99.0], [30.2, 99.0], [30.3, 99.0], [30.4, 99.0], [30.5, 99.0], [30.6, 100.0], [30.7, 100.0], [30.8, 100.0], [30.9, 100.0], [31.0, 100.0], [31.1, 100.0], [31.2, 100.0], [31.3, 100.0], [31.4, 100.0], [31.5, 100.0], [31.6, 101.0], [31.7, 101.0], [31.8, 101.0], [31.9, 101.0], [32.0, 101.0], [32.1, 101.0], [32.2, 101.0], [32.3, 101.0], [32.4, 101.0], [32.5, 101.0], [32.6, 101.0], [32.7, 102.0], [32.8, 102.0], [32.9, 102.0], [33.0, 102.0], [33.1, 102.0], [33.2, 102.0], [33.3, 102.0], [33.4, 102.0], [33.5, 102.0], [33.6, 102.0], [33.7, 103.0], [33.8, 103.0], [33.9, 103.0], [34.0, 103.0], [34.1, 103.0], [34.2, 103.0], [34.3, 103.0], [34.4, 103.0], [34.5, 103.0], [34.6, 103.0], [34.7, 103.0], [34.8, 103.0], [34.9, 103.0], [35.0, 104.0], [35.1, 104.0], [35.2, 104.0], [35.3, 104.0], [35.4, 104.0], [35.5, 104.0], [35.6, 104.0], [35.7, 104.0], [35.8, 104.0], [35.9, 105.0], [36.0, 105.0], [36.1, 105.0], [36.2, 105.0], [36.3, 105.0], [36.4, 105.0], [36.5, 105.0], [36.6, 105.0], [36.7, 105.0], [36.8, 105.0], [36.9, 106.0], [37.0, 106.0], [37.1, 106.0], [37.2, 106.0], [37.3, 106.0], [37.4, 106.0], [37.5, 106.0], [37.6, 106.0], [37.7, 106.0], [37.8, 106.0], [37.9, 106.0], [38.0, 106.0], [38.1, 106.0], [38.2, 106.0], [38.3, 107.0], [38.4, 107.0], [38.5, 107.0], [38.6, 107.0], [38.7, 107.0], [38.8, 107.0], [38.9, 107.0], [39.0, 107.0], [39.1, 107.0], [39.2, 107.0], [39.3, 107.0], [39.4, 107.0], [39.5, 107.0], [39.6, 107.0], [39.7, 107.0], [39.8, 107.0], [39.9, 107.0], [40.0, 108.0], [40.1, 108.0], [40.2, 108.0], [40.3, 108.0], [40.4, 108.0], [40.5, 108.0], [40.6, 108.0], [40.7, 108.0], [40.8, 108.0], [40.9, 108.0], [41.0, 108.0], [41.1, 109.0], [41.2, 109.0], [41.3, 109.0], [41.4, 109.0], [41.5, 109.0], [41.6, 109.0], [41.7, 109.0], [41.8, 109.0], [41.9, 109.0], [42.0, 110.0], [42.1, 110.0], [42.2, 110.0], [42.3, 110.0], [42.4, 110.0], [42.5, 110.0], [42.6, 110.0], [42.7, 110.0], [42.8, 111.0], [42.9, 111.0], [43.0, 111.0], [43.1, 111.0], [43.2, 111.0], [43.3, 111.0], [43.4, 111.0], [43.5, 111.0], [43.6, 111.0], [43.7, 111.0], [43.8, 111.0], [43.9, 111.0], [44.0, 112.0], [44.1, 112.0], [44.2, 112.0], [44.3, 112.0], [44.4, 112.0], [44.5, 112.0], [44.6, 112.0], [44.7, 113.0], [44.8, 113.0], [44.9, 113.0], [45.0, 113.0], [45.1, 113.0], [45.2, 113.0], [45.3, 113.0], [45.4, 113.0], [45.5, 113.0], [45.6, 113.0], [45.7, 113.0], [45.8, 114.0], [45.9, 114.0], [46.0, 114.0], [46.1, 114.0], [46.2, 114.0], [46.3, 114.0], [46.4, 114.0], [46.5, 115.0], [46.6, 115.0], [46.7, 115.0], [46.8, 115.0], [46.9, 115.0], [47.0, 115.0], [47.1, 115.0], [47.2, 115.0], [47.3, 115.0], [47.4, 115.0], [47.5, 115.0], [47.6, 116.0], [47.7, 116.0], [47.8, 116.0], [47.9, 116.0], [48.0, 116.0], [48.1, 116.0], [48.2, 116.0], [48.3, 116.0], [48.4, 116.0], [48.5, 116.0], [48.6, 117.0], [48.7, 117.0], [48.8, 117.0], [48.9, 117.0], [49.0, 117.0], [49.1, 117.0], [49.2, 117.0], [49.3, 117.0], [49.4, 117.0], [49.5, 118.0], [49.6, 118.0], [49.7, 118.0], [49.8, 118.0], [49.9, 118.0], [50.0, 118.0], [50.1, 118.0], [50.2, 118.0], [50.3, 119.0], [50.4, 119.0], [50.5, 119.0], [50.6, 119.0], [50.7, 119.0], [50.8, 119.0], [50.9, 119.0], [51.0, 120.0], [51.1, 120.0], [51.2, 120.0], [51.3, 120.0], [51.4, 120.0], [51.5, 120.0], [51.6, 120.0], [51.7, 120.0], [51.8, 120.0], [51.9, 120.0], [52.0, 120.0], [52.1, 121.0], [52.2, 121.0], [52.3, 121.0], [52.4, 121.0], [52.5, 121.0], [52.6, 121.0], [52.7, 121.0], [52.8, 122.0], [52.9, 122.0], [53.0, 122.0], [53.1, 122.0], [53.2, 122.0], [53.3, 122.0], [53.4, 122.0], [53.5, 122.0], [53.6, 122.0], [53.7, 123.0], [53.8, 123.0], [53.9, 123.0], [54.0, 123.0], [54.1, 123.0], [54.2, 123.0], [54.3, 123.0], [54.4, 123.0], [54.5, 123.0], [54.6, 123.0], [54.7, 124.0], [54.8, 124.0], [54.9, 124.0], [55.0, 124.0], [55.1, 124.0], [55.2, 124.0], [55.3, 125.0], [55.4, 125.0], [55.5, 125.0], [55.6, 125.0], [55.7, 125.0], [55.8, 125.0], [55.9, 125.0], [56.0, 125.0], [56.1, 125.0], [56.2, 126.0], [56.3, 126.0], [56.4, 126.0], [56.5, 126.0], [56.6, 126.0], [56.7, 126.0], [56.8, 126.0], [56.9, 126.0], [57.0, 127.0], [57.1, 127.0], [57.2, 127.0], [57.3, 127.0], [57.4, 127.0], [57.5, 127.0], [57.6, 127.0], [57.7, 128.0], [57.8, 128.0], [57.9, 128.0], [58.0, 128.0], [58.1, 128.0], [58.2, 128.0], [58.3, 128.0], [58.4, 128.0], [58.5, 129.0], [58.6, 129.0], [58.7, 129.0], [58.8, 129.0], [58.9, 129.0], [59.0, 129.0], [59.1, 129.0], [59.2, 129.0], [59.3, 129.0], [59.4, 129.0], [59.5, 129.0], [59.6, 129.0], [59.7, 129.0], [59.8, 129.0], [59.9, 130.0], [60.0, 130.0], [60.1, 130.0], [60.2, 130.0], [60.3, 130.0], [60.4, 130.0], [60.5, 131.0], [60.6, 131.0], [60.7, 131.0], [60.8, 131.0], [60.9, 131.0], [61.0, 131.0], [61.1, 131.0], [61.2, 131.0], [61.3, 131.0], [61.4, 131.0], [61.5, 132.0], [61.6, 132.0], [61.7, 132.0], [61.8, 132.0], [61.9, 133.0], [62.0, 133.0], [62.1, 133.0], [62.2, 133.0], [62.3, 133.0], [62.4, 133.0], [62.5, 133.0], [62.6, 133.0], [62.7, 133.0], [62.8, 133.0], [62.9, 134.0], [63.0, 134.0], [63.1, 134.0], [63.2, 134.0], [63.3, 134.0], [63.4, 134.0], [63.5, 135.0], [63.6, 135.0], [63.7, 135.0], [63.8, 135.0], [63.9, 135.0], [64.0, 136.0], [64.1, 136.0], [64.2, 136.0], [64.3, 136.0], [64.4, 136.0], [64.5, 136.0], [64.6, 136.0], [64.7, 136.0], [64.8, 137.0], [64.9, 137.0], [65.0, 137.0], [65.1, 137.0], [65.2, 137.0], [65.3, 137.0], [65.4, 137.0], [65.5, 138.0], [65.6, 138.0], [65.7, 138.0], [65.8, 138.0], [65.9, 138.0], [66.0, 139.0], [66.1, 139.0], [66.2, 139.0], [66.3, 139.0], [66.4, 139.0], [66.5, 139.0], [66.6, 139.0], [66.7, 140.0], [66.8, 140.0], [66.9, 140.0], [67.0, 141.0], [67.1, 141.0], [67.2, 141.0], [67.3, 141.0], [67.4, 141.0], [67.5, 141.0], [67.6, 141.0], [67.7, 141.0], [67.8, 142.0], [67.9, 142.0], [68.0, 142.0], [68.1, 142.0], [68.2, 142.0], [68.3, 143.0], [68.4, 143.0], [68.5, 143.0], [68.6, 144.0], [68.7, 145.0], [68.8, 145.0], [68.9, 146.0], [69.0, 146.0], [69.1, 146.0], [69.2, 146.0], [69.3, 146.0], [69.4, 146.0], [69.5, 147.0], [69.6, 147.0], [69.7, 147.0], [69.8, 148.0], [69.9, 148.0], [70.0, 149.0], [70.1, 149.0], [70.2, 149.0], [70.3, 149.0], [70.4, 149.0], [70.5, 150.0], [70.6, 150.0], [70.7, 151.0], [70.8, 151.0], [70.9, 151.0], [71.0, 153.0], [71.1, 153.0], [71.2, 153.0], [71.3, 154.0], [71.4, 154.0], [71.5, 154.0], [71.6, 154.0], [71.7, 154.0], [71.8, 155.0], [71.9, 155.0], [72.0, 155.0], [72.1, 155.0], [72.2, 155.0], [72.3, 156.0], [72.4, 156.0], [72.5, 156.0], [72.6, 156.0], [72.7, 156.0], [72.8, 156.0], [72.9, 157.0], [73.0, 158.0], [73.1, 158.0], [73.2, 158.0], [73.3, 159.0], [73.4, 159.0], [73.5, 160.0], [73.6, 160.0], [73.7, 160.0], [73.8, 160.0], [73.9, 160.0], [74.0, 161.0], [74.1, 161.0], [74.2, 162.0], [74.3, 162.0], [74.4, 163.0], [74.5, 163.0], [74.6, 163.0], [74.7, 163.0], [74.8, 164.0], [74.9, 164.0], [75.0, 164.0], [75.1, 165.0], [75.2, 166.0], [75.3, 166.0], [75.4, 166.0], [75.5, 166.0], [75.6, 167.0], [75.7, 167.0], [75.8, 168.0], [75.9, 168.0], [76.0, 169.0], [76.1, 170.0], [76.2, 170.0], [76.3, 171.0], [76.4, 171.0], [76.5, 172.0], [76.6, 173.0], [76.7, 173.0], [76.8, 174.0], [76.9, 175.0], [77.0, 176.0], [77.1, 176.0], [77.2, 177.0], [77.3, 177.0], [77.4, 177.0], [77.5, 177.0], [77.6, 179.0], [77.7, 180.0], [77.8, 180.0], [77.9, 181.0], [78.0, 182.0], [78.1, 183.0], [78.2, 183.0], [78.3, 183.0], [78.4, 184.0], [78.5, 186.0], [78.6, 186.0], [78.7, 187.0], [78.8, 187.0], [78.9, 187.0], [79.0, 189.0], [79.1, 190.0], [79.2, 192.0], [79.3, 193.0], [79.4, 194.0], [79.5, 195.0], [79.6, 195.0], [79.7, 195.0], [79.8, 197.0], [79.9, 197.0], [80.0, 200.0], [80.1, 203.0], [80.2, 204.0], [80.3, 205.0], [80.4, 205.0], [80.5, 205.0], [80.6, 207.0], [80.7, 207.0], [80.8, 209.0], [80.9, 212.0], [81.0, 213.0], [81.1, 213.0], [81.2, 213.0], [81.3, 217.0], [81.4, 218.0], [81.5, 221.0], [81.6, 224.0], [81.7, 233.0], [81.8, 237.0], [81.9, 237.0], [82.0, 239.0], [82.1, 239.0], [82.2, 247.0], [82.3, 258.0], [82.4, 259.0], [82.5, 260.0], [82.6, 261.0], [82.7, 261.0], [82.8, 261.0], [82.9, 265.0], [83.0, 271.0], [83.1, 273.0], [83.2, 277.0], [83.3, 284.0], [83.4, 287.0], [83.5, 290.0], [83.6, 291.0], [83.7, 291.0], [83.8, 317.0], [83.9, 319.0], [84.0, 328.0], [84.1, 332.0], [84.2, 333.0], [84.3, 368.0], [84.4, 371.0], [84.5, 382.0], [84.6, 386.0], [84.7, 436.0], [84.8, 586.0], [84.9, 598.0], [85.0, 640.0], [85.1, 701.0], [85.2, 705.0], [85.3, 728.0], [85.4, 733.0], [85.5, 784.0], [85.6, 800.0], [85.7, 810.0], [85.8, 825.0], [85.9, 827.0], [86.0, 929.0], [86.1, 970.0], [86.2, 1024.0], [86.3, 1037.0], [86.4, 1076.0], [86.5, 1097.0], [86.6, 1106.0], [86.7, 1109.0], [86.8, 1113.0], [86.9, 1117.0], [87.0, 1178.0], [87.1, 1187.0], [87.2, 1190.0], [87.3, 1203.0], [87.4, 1221.0], [87.5, 1240.0], [87.6, 1248.0], [87.7, 1265.0], [87.8, 1268.0], [87.9, 1272.0], [88.0, 1280.0], [88.1, 1313.0], [88.2, 1313.0], [88.3, 1316.0], [88.4, 1327.0], [88.5, 1344.0], [88.6, 1349.0], [88.7, 1350.0], [88.8, 1367.0], [88.9, 1371.0], [89.0, 1378.0], [89.1, 1384.0], [89.2, 1389.0], [89.3, 1406.0], [89.4, 1418.0], [89.5, 1430.0], [89.6, 1431.0], [89.7, 1437.0], [89.8, 1450.0], [89.9, 1462.0], [90.0, 1486.0], [90.1, 1494.0], [90.2, 1504.0], [90.3, 1518.0], [90.4, 1554.0], [90.5, 1555.0], [90.6, 1586.0], [90.7, 1587.0], [90.8, 1600.0], [90.9, 1600.0], [91.0, 1601.0], [91.1, 1601.0], [91.2, 1601.0], [91.3, 1605.0], [91.4, 1606.0], [91.5, 1631.0], [91.6, 1652.0], [91.7, 1673.0], [91.8, 1696.0], [91.9, 1707.0], [92.0, 1713.0], [92.1, 1714.0], [92.2, 1715.0], [92.3, 1754.0], [92.4, 1791.0], [92.5, 1886.0], [92.6, 1895.0], [92.7, 1928.0], [92.8, 1961.0], [92.9, 2013.0], [93.0, 2037.0], [93.1, 2048.0], [93.2, 2058.0], [93.3, 2142.0], [93.4, 2171.0], [93.5, 2214.0], [93.6, 2259.0], [93.7, 2263.0], [93.8, 2292.0], [93.9, 2310.0], [94.0, 2386.0], [94.1, 2387.0], [94.2, 2445.0], [94.3, 2475.0], [94.4, 2489.0], [94.5, 2518.0], [94.6, 2532.0], [94.7, 2535.0], [94.8, 2569.0], [94.9, 2581.0], [95.0, 2583.0], [95.1, 2584.0], [95.2, 2608.0], [95.3, 2653.0], [95.4, 2693.0], [95.5, 2759.0], [95.6, 2817.0], [95.7, 2880.0], [95.8, 3025.0], [95.9, 3109.0], [96.0, 3265.0], [96.1, 3335.0], [96.2, 3383.0], [96.3, 3447.0], [96.4, 3637.0], [96.5, 3897.0], [96.6, 3922.0], [96.7, 3927.0], [96.8, 4113.0], [96.9, 4134.0], [97.0, 4205.0], [97.1, 4220.0], [97.2, 4585.0], [97.3, 4935.0], [97.4, 5050.0], [97.5, 5338.0], [97.6, 5581.0], [97.7, 5591.0], [97.8, 5682.0], [97.9, 5707.0], [98.0, 5752.0], [98.1, 5761.0], [98.2, 6742.0], [98.3, 6947.0], [98.4, 7017.0], [98.5, 10300.0], [98.6, 10821.0], [98.7, 11888.0], [98.8, 12991.0], [98.9, 14040.0], [99.0, 18842.0], [99.1, 19998.0], [99.2, 26208.0], [99.3, 30008.0], [99.4, 30013.0], [99.5, 30068.0], [99.6, 30833.0], [99.7, 35351.0], [99.8, 59580.0], [99.9, 65513.0]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 889.0, "series": [{"data": [[0.0, 20.0], [600.0, 4.0], [700.0, 5.0], [800.0, 3.0], [900.0, 1.0], [1100.0, 11.0], [1200.0, 15.0], [1300.0, 13.0], [1400.0, 14.0], [1500.0, 14.0], [1600.0, 11.0], [1700.0, 9.0], [1800.0, 5.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 5.0], [132500.0, 1.0], [2200.0, 3.0], [2300.0, 3.0], [2400.0, 2.0], [2500.0, 6.0], [2600.0, 4.0], [2700.0, 3.0], [2800.0, 2.0], [2900.0, 3.0], [3000.0, 5.0], [3100.0, 1.0], [3200.0, 1.0], [3300.0, 2.0], [3400.0, 9.0], [3700.0, 3.0], [3600.0, 1.0], [3800.0, 3.0], [3900.0, 2.0], [4000.0, 2.0], [4100.0, 1.0], [4200.0, 7.0], [4300.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [4900.0, 3.0], [5000.0, 4.0], [5300.0, 1.0], [5400.0, 2.0], [5600.0, 1.0], [5500.0, 2.0], [5700.0, 3.0], [5800.0, 3.0], [6000.0, 1.0], [5900.0, 4.0], [6200.0, 1.0], [6500.0, 1.0], [6900.0, 2.0], [7000.0, 2.0], [117500.0, 1.0], [7600.0, 1.0], [8400.0, 1.0], [8900.0, 1.0], [9100.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [10300.0, 1.0], [10600.0, 1.0], [11200.0, 1.0], [11100.0, 1.0], [11800.0, 2.0], [12100.0, 1.0], [13300.0, 1.0], [14000.0, 1.0], [14800.0, 1.0], [15200.0, 1.0], [16000.0, 1.0], [17100.0, 1.0], [17000.0, 1.0], [23700.0, 1.0], [100.0, 846.0], [28800.0, 1.0], [30000.0, 6.0], [30100.0, 1.0], [31200.0, 1.0], [31000.0, 1.0], [135900.0, 1.0], [47600.0, 1.0], [200.0, 235.0], [65200.0, 1.0], [300.0, 36.0], [400.0, 7.0], [500.0, 3.0]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[0.0, 15.0], [600.0, 2.0], [800.0, 7.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 8.0], [1200.0, 14.0], [1300.0, 16.0], [1400.0, 14.0], [1500.0, 10.0], [1600.0, 9.0], [1700.0, 10.0], [1800.0, 4.0], [1900.0, 7.0], [2000.0, 4.0], [2100.0, 4.0], [2200.0, 4.0], [2300.0, 1.0], [2400.0, 5.0], [2500.0, 5.0], [2600.0, 3.0], [2800.0, 1.0], [2700.0, 5.0], [3000.0, 2.0], [3100.0, 2.0], [3300.0, 4.0], [3400.0, 5.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 3.0], [4000.0, 3.0], [4100.0, 7.0], [4300.0, 3.0], [4200.0, 4.0], [4500.0, 1.0], [4600.0, 1.0], [77700.0, 1.0], [4700.0, 1.0], [5000.0, 2.0], [4900.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [5500.0, 1.0], [5400.0, 1.0], [5700.0, 2.0], [5800.0, 2.0], [6000.0, 1.0], [5900.0, 1.0], [6300.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [7100.0, 1.0], [7400.0, 2.0], [7300.0, 1.0], [8400.0, 3.0], [8500.0, 1.0], [9200.0, 1.0], [9500.0, 2.0], [9600.0, 1.0], [9700.0, 1.0], [10600.0, 1.0], [11000.0, 1.0], [11700.0, 1.0], [11300.0, 1.0], [11900.0, 1.0], [13000.0, 1.0], [14000.0, 1.0], [15200.0, 2.0], [15500.0, 1.0], [15900.0, 1.0], [17400.0, 1.0], [17900.0, 1.0], [22100.0, 1.0], [100.0, 889.0], [25900.0, 1.0], [26900.0, 1.0], [30000.0, 2.0], [31600.0, 1.0], [32100.0, 1.0], [36400.0, 1.0], [200.0, 226.0], [68800.0, 1.0], [300.0, 27.0], [400.0, 9.0], [500.0, 3.0]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[0.0, 428.0], [600.0, 2.0], [700.0, 7.0], [183600.0, 1.0], [800.0, 5.0], [900.0, 3.0], [1000.0, 6.0], [1100.0, 9.0], [1200.0, 12.0], [1300.0, 17.0], [1400.0, 12.0], [1500.0, 8.0], [1600.0, 16.0], [1700.0, 8.0], [1800.0, 3.0], [1900.0, 3.0], [2000.0, 5.0], [2100.0, 4.0], [2300.0, 4.0], [2200.0, 5.0], [2400.0, 4.0], [2500.0, 10.0], [2600.0, 4.0], [2800.0, 2.0], [2700.0, 2.0], [3000.0, 2.0], [3100.0, 1.0], [3200.0, 2.0], [3300.0, 2.0], [3400.0, 2.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 1.0], [4200.0, 3.0], [4100.0, 2.0], [4500.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5000.0, 1.0], [5300.0, 2.0], [5600.0, 2.0], [5500.0, 2.0], [5700.0, 4.0], [6700.0, 1.0], [6900.0, 2.0], [7000.0, 1.0], [10000.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [11800.0, 1.0], [12700.0, 1.0], [12900.0, 1.0], [14000.0, 1.0], [16700.0, 1.0], [18800.0, 1.0], [19900.0, 1.0], [100.0, 692.0], [26200.0, 1.0], [27900.0, 1.0], [30000.0, 4.0], [30800.0, 1.0], [35300.0, 1.0], [46800.0, 1.0], [200.0, 52.0], [59500.0, 1.0], [65500.0, 1.0], [300.0, 13.0], [400.0, 1.0], [500.0, 3.0]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 183600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 19.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3496.0, "series": [{"data": [[0.0, 3496.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 212.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 473.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 19.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65560094E12, "maxY": 14.0, "series": [{"data": [[1.65560112E12, 14.0], [1.6556013E12, 1.4381443298969077], [1.655601E12, 14.0], [1.65560118E12, 14.0], [1.65560136E12, 1.0], [1.65560106E12, 14.0], [1.65560124E12, 8.990950226244333], [1.65560094E12, 14.0]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65560136E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 50.9, "minX": 1.0, "maxY": 2316.9999999999995, "series": [{"data": [[8.0, 134.63636363636365], [2.0, 317.8], [9.0, 128.4], [10.0, 126.80000000000001], [11.0, 304.24999999999994], [12.0, 135.27777777777777], [3.0, 283.6233766233767], [13.0, 156.29729729729726], [14.0, 1633.6310408921922], [4.0, 112.33333333333334], [1.0, 274.8928571428572], [5.0, 118.99999999999999], [7.0, 377.1818181818181]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[12.009285714285724, 1313.452857142857]], "isOverall": false, "label": "查询测试-Aggregated", "isController": false}, {"data": [[8.0, 120.77777777777777], [2.0, 334.70000000000005], [9.0, 133.88888888888889], [10.0, 127.60000000000001], [11.0, 663.2857142857142], [12.0, 152.57894736842107], [3.0, 424.0253164556963], [13.0, 155.027027027027], [14.0, 1189.3973880597011], [4.0, 116.63636363636364], [1.0, 301.5119047619048], [5.0, 120.11111111111111], [6.0, 117.0], [7.0, 262.83720930232556]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[11.988571428571436, 977.024999999998]], "isOverall": false, "label": "发帖测试-Aggregated", "isController": false}, {"data": [[8.0, 60.909090909090914], [2.0, 98.88888888888889], [9.0, 62.5], [10.0, 62.875], [11.0, 923.6666666666666], [12.0, 85.6875], [3.0, 313.2307692307692], [13.0, 97.29729729729732], [14.0, 973.5513413506017], [4.0, 50.9], [1.0, 2316.9999999999995], [5.0, 60.75], [6.0, 75.0], [7.0, 233.41463414634143]], "isOverall": false, "label": "登录测试", "isController": false}, {"data": [[12.030714285714286, 927.0757142857154]], "isOverall": false, "label": "登录测试-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 14.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 223.38333333333333, "minX": 1.65560094E12, "maxY": 16600.45, "series": [{"data": [[1.65560112E12, 5525.333333333333], [1.6556013E12, 1610.1666666666667], [1.655601E12, 444.23333333333335], [1.65560118E12, 16600.45], [1.65560136E12, 950.05], [1.65560106E12, 580.1666666666666], [1.65560124E12, 7322.133333333333], [1.65560094E12, 1738.0666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65560112E12, 2676.0833333333335], [1.6556013E12, 778.9166666666666], [1.655601E12, 223.38333333333333], [1.65560118E12, 8037.266666666666], [1.65560136E12, 462.3], [1.65560106E12, 298.1666666666667], [1.65560124E12, 3551.4333333333334], [1.65560094E12, 830.7833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65560136E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 129.3947368421053, "minX": 1.65560094E12, "maxY": 20253.807692307695, "series": [{"data": [[1.65560112E12, 1094.5855855855855], [1.6556013E12, 291.01538461538456], [1.655601E12, 11779.833333333334], [1.65560118E12, 768.5862068965523], [1.65560136E12, 224.0526315789473], [1.65560106E12, 20253.807692307695], [1.65560124E12, 411.82711864406787], [1.65560094E12, 2835.275362318841]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[1.65560112E12, 1351.9547511312219], [1.6556013E12, 248.55384615384617], [1.655601E12, 10037.058823529413], [1.65560118E12, 406.9357249626309], [1.65560136E12, 357.4615384615385], [1.65560106E12, 10860.730769230773], [1.65560124E12, 420.52684563758356], [1.65560094E12, 2898.3076923076924]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[1.65560112E12, 1418.7767857142862], [1.6556013E12, 2991.328125], [1.655601E12, 12032.571428571428], [1.65560118E12, 242.2687687687691], [1.65560136E12, 129.3947368421053], [1.65560106E12, 5113.454545454544], [1.65560124E12, 328.2336769759451], [1.65560094E12, 2185.0135135135133]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65560136E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 129.3947368421053, "minX": 1.65560094E12, "maxY": 20253.692307692305, "series": [{"data": [[1.65560112E12, 1094.5405405405409], [1.6556013E12, 290.9692307692308], [1.655601E12, 11779.777777777777], [1.65560118E12, 768.5277361319345], [1.65560136E12, 223.97368421052633], [1.65560106E12, 20253.692307692305], [1.65560124E12, 411.75932203389823], [1.65560094E12, 2835.130434782608]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[1.65560112E12, 1351.8642533936652], [1.6556013E12, 248.47692307692301], [1.655601E12, 10036.882352941177], [1.65560118E12, 406.8819133034374], [1.65560136E12, 357.4358974358975], [1.65560106E12, 10860.65384615385], [1.65560124E12, 420.4966442953019], [1.65560094E12, 2898.199999999999]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[1.65560112E12, 1418.6964285714278], [1.6556013E12, 2991.296875000001], [1.655601E12, 12032.428571428569], [1.65560118E12, 242.20270270270274], [1.65560136E12, 129.3947368421053], [1.65560106E12, 5113.454545454544], [1.65560124E12, 328.1786941580758], [1.65560094E12, 2184.8513513513517]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65560136E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65560094E12, "maxY": 4.837837837837834, "series": [{"data": [[1.65560112E12, 0.03153153153153155], [1.6556013E12, 0.04615384615384617], [1.655601E12, 0.2222222222222222], [1.65560118E12, 0.005997001499250378], [1.65560136E12, 0.0], [1.65560106E12, 0.07692307692307694], [1.65560124E12, 0.016949152542372888], [1.65560094E12, 0.0]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[1.65560112E12, 0.03167420814479639], [1.6556013E12, 0.015384615384615385], [1.655601E12, 0.35294117647058826], [1.65560118E12, 0.022421524663677132], [1.65560136E12, 0.0], [1.65560106E12, 0.23076923076923075], [1.65560124E12, 0.01006711409395974], [1.65560094E12, 0.0]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[1.65560112E12, 0.02232142857142857], [1.6556013E12, 0.0], [1.655601E12, 0.2857142857142857], [1.65560118E12, 0.015015015015015041], [1.65560136E12, 0.05263157894736843], [1.65560106E12, 0.13636363636363635], [1.65560124E12, 0.010309278350515462], [1.65560094E12, 4.837837837837834]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65560136E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 41.0, "minX": 1.65560094E12, "maxY": 183656.0, "series": [{"data": [[1.65560112E12, 68895.0], [1.6556013E12, 183656.0], [1.655601E12, 47634.0], [1.65560118E12, 135960.0], [1.65560136E12, 3931.0], [1.65560106E12, 77728.0], [1.65560124E12, 9205.0], [1.65560094E12, 22155.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65560112E12, 2510.8], [1.6556013E12, 227.5], [1.655601E12, 17737.200000000004], [1.65560118E12, 350.3000000000004], [1.65560136E12, 214.40000000000003], [1.65560106E12, 28050.7], [1.65560124E12, 561.0], [1.65560094E12, 5819.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65560112E12, 15359.160000000003], [1.6556013E12, 11067.600000002065], [1.655601E12, 47634.0], [1.65560118E12, 4133.9400000000005], [1.65560136E12, 3692.440000000005], [1.65560106E12, 77728.0], [1.65560124E12, 5963.999999999999], [1.65560094E12, 13953.059999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65560112E12, 4878.599999999983], [1.6556013E12, 1204.5], [1.655601E12, 28982.999999999975], [1.65560118E12, 1480.0999999999995], [1.65560136E12, 489.5999999999874], [1.65560106E12, 31952.8], [1.65560124E12, 1604.5], [1.65560094E12, 9693.849999999977]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65560112E12, 54.0], [1.6556013E12, 41.0], [1.655601E12, 380.0], [1.65560118E12, 49.0], [1.65560136E12, 42.0], [1.65560106E12, 237.0], [1.65560124E12, 41.0], [1.65560094E12, 90.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65560112E12, 194.0], [1.6556013E12, 144.0], [1.655601E12, 2664.0], [1.65560118E12, 161.0], [1.65560136E12, 145.0], [1.65560106E12, 4223.5], [1.65560124E12, 135.0], [1.65560094E12, 1640.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65560136E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 102.0, "minX": 1.0, "maxY": 35881.0, "series": [{"data": [[2.0, 2366.0], [3.0, 2509.0], [4.0, 1386.0], [5.0, 1705.0], [6.0, 922.5], [7.0, 166.0], [8.0, 144.0], [9.0, 1474.5], [10.0, 1596.5], [11.0, 1280.0], [12.0, 464.0], [13.0, 170.0], [14.0, 1605.0], [15.0, 138.0], [16.0, 116.0], [17.0, 174.5], [18.0, 1314.5], [19.0, 102.0], [20.0, 1663.0], [21.0, 117.0], [22.0, 288.5], [23.0, 194.0], [24.0, 124.0], [25.0, 375.0], [26.0, 226.5], [27.0, 251.0], [28.0, 154.5], [29.0, 142.5], [30.0, 122.0], [31.0, 366.0], [33.0, 270.0], [32.0, 192.0], [34.0, 156.5], [36.0, 136.0], [40.0, 165.5], [43.0, 204.0], [42.0, 108.5], [45.0, 181.0], [46.0, 195.5], [48.0, 196.0], [59.0, 168.0], [58.0, 157.5], [61.0, 163.0], [60.0, 162.0], [62.0, 179.0], [63.0, 175.0], [64.0, 153.0], [67.0, 161.0], [70.0, 142.5], [71.0, 159.0], [73.0, 153.0], [74.0, 154.0], [87.0, 145.0], [91.0, 148.0], [89.0, 149.0], [90.0, 142.5], [92.0, 143.5], [95.0, 143.0], [93.0, 149.0], [1.0, 2859.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 35881.0], [2.0, 30017.0], [3.0, 30016.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 95.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 102.0, "minX": 1.0, "maxY": 35881.0, "series": [{"data": [[2.0, 2366.0], [3.0, 2509.0], [4.0, 1386.0], [5.0, 1705.0], [6.0, 922.5], [7.0, 166.0], [8.0, 144.0], [9.0, 1474.5], [10.0, 1596.5], [11.0, 1280.0], [12.0, 464.0], [13.0, 170.0], [14.0, 1605.0], [15.0, 138.0], [16.0, 116.0], [17.0, 174.5], [18.0, 1314.5], [19.0, 102.0], [20.0, 1663.0], [21.0, 117.0], [22.0, 288.5], [23.0, 194.0], [24.0, 124.0], [25.0, 375.0], [26.0, 226.5], [27.0, 250.0], [28.0, 154.5], [29.0, 142.0], [30.0, 122.0], [31.0, 366.0], [33.0, 270.0], [32.0, 192.0], [34.0, 156.5], [36.0, 136.0], [40.0, 165.5], [43.0, 204.0], [42.0, 108.5], [45.0, 181.0], [46.0, 195.5], [48.0, 196.0], [59.0, 168.0], [58.0, 157.0], [61.0, 163.0], [60.0, 162.0], [62.0, 179.0], [63.0, 175.0], [64.0, 153.0], [67.0, 161.0], [70.0, 142.5], [71.0, 159.0], [73.0, 153.0], [74.0, 154.0], [87.0, 145.0], [91.0, 148.0], [89.0, 149.0], [90.0, 142.5], [92.0, 143.5], [95.0, 143.0], [93.0, 149.0], [1.0, 2859.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 35881.0], [2.0, 30017.0], [3.0, 30016.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 95.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9333333333333333, "minX": 1.65560094E12, "maxY": 33.36666666666667, "series": [{"data": [[1.65560112E12, 11.116666666666667], [1.6556013E12, 3.2], [1.655601E12, 0.9333333333333333], [1.65560118E12, 33.36666666666667], [1.65560136E12, 1.9], [1.65560106E12, 1.2333333333333334], [1.65560124E12, 14.55], [1.65560094E12, 3.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65560136E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65560094E12, "maxY": 33.36666666666667, "series": [{"data": [[1.65560112E12, 11.05], [1.6556013E12, 3.2333333333333334], [1.655601E12, 0.7833333333333333], [1.65560118E12, 33.36666666666667], [1.65560136E12, 1.9166666666666667], [1.65560106E12, 1.1333333333333333], [1.65560124E12, 14.733333333333333], [1.65560094E12, 3.466666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65560112E12, 0.06666666666666667], [1.655601E12, 0.15], [1.65560106E12, 0.1]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65560136E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65560094E12, "maxY": 11.15, "series": [{"data": [[1.65560112E12, 3.683333333333333], [1.6556013E12, 1.0833333333333333], [1.655601E12, 0.25], [1.65560118E12, 11.116666666666667], [1.65560136E12, 0.6333333333333333], [1.65560106E12, 0.35], [1.65560124E12, 4.916666666666667], [1.65560094E12, 1.15]], "isOverall": false, "label": "查询测试-success", "isController": false}, {"data": [[1.65560112E12, 0.016666666666666666], [1.655601E12, 0.05], [1.65560106E12, 0.08333333333333333]], "isOverall": false, "label": "查询测试-failure", "isController": false}, {"data": [[1.655601E12, 0.05]], "isOverall": false, "label": "发帖测试-failure", "isController": false}, {"data": [[1.65560112E12, 3.683333333333333], [1.6556013E12, 1.0833333333333333], [1.655601E12, 0.23333333333333334], [1.65560118E12, 11.15], [1.65560136E12, 0.65], [1.65560106E12, 0.43333333333333335], [1.65560124E12, 4.966666666666667], [1.65560094E12, 1.0833333333333333]], "isOverall": false, "label": "发帖测试-success", "isController": false}, {"data": [[1.65560112E12, 3.683333333333333], [1.6556013E12, 1.0666666666666667], [1.655601E12, 0.3], [1.65560118E12, 11.1], [1.65560136E12, 0.6333333333333333], [1.65560106E12, 0.35], [1.65560124E12, 4.85], [1.65560094E12, 1.2333333333333334]], "isOverall": false, "label": "登录测试-success", "isController": false}, {"data": [[1.65560112E12, 0.05], [1.655601E12, 0.05], [1.65560106E12, 0.016666666666666666]], "isOverall": false, "label": "登录测试-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65560136E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65560094E12, "maxY": 33.36666666666667, "series": [{"data": [[1.65560112E12, 11.05], [1.6556013E12, 3.2333333333333334], [1.655601E12, 0.7833333333333333], [1.65560118E12, 33.36666666666667], [1.65560136E12, 1.9166666666666667], [1.65560106E12, 1.1333333333333333], [1.65560124E12, 14.733333333333333], [1.65560094E12, 3.466666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65560112E12, 0.06666666666666667], [1.655601E12, 0.15], [1.65560106E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65560136E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

