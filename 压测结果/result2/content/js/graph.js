/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 44.0, "minX": 0.0, "maxY": 56063.0, "series": [{"data": [[0.0, 91.0], [0.1, 97.0], [0.2, 98.0], [0.3, 99.0], [0.4, 100.0], [0.5, 103.0], [0.6, 103.0], [0.7, 104.0], [0.8, 104.0], [0.9, 104.0], [1.0, 107.0], [1.1, 108.0], [1.2, 108.0], [1.3, 109.0], [1.4, 109.0], [1.5, 110.0], [1.6, 110.0], [1.7, 110.0], [1.8, 110.0], [1.9, 111.0], [2.0, 111.0], [2.1, 111.0], [2.2, 111.0], [2.3, 111.0], [2.4, 111.0], [2.5, 112.0], [2.6, 112.0], [2.7, 112.0], [2.8, 112.0], [2.9, 113.0], [3.0, 114.0], [3.1, 114.0], [3.2, 114.0], [3.3, 114.0], [3.4, 115.0], [3.5, 116.0], [3.6, 116.0], [3.7, 117.0], [3.8, 118.0], [3.9, 118.0], [4.0, 119.0], [4.1, 119.0], [4.2, 120.0], [4.3, 121.0], [4.4, 121.0], [4.5, 121.0], [4.6, 122.0], [4.7, 122.0], [4.8, 122.0], [4.9, 122.0], [5.0, 122.0], [5.1, 123.0], [5.2, 123.0], [5.3, 124.0], [5.4, 124.0], [5.5, 124.0], [5.6, 125.0], [5.7, 125.0], [5.8, 126.0], [5.9, 126.0], [6.0, 126.0], [6.1, 126.0], [6.2, 126.0], [6.3, 127.0], [6.4, 127.0], [6.5, 127.0], [6.6, 128.0], [6.7, 128.0], [6.8, 128.0], [6.9, 128.0], [7.0, 129.0], [7.1, 129.0], [7.2, 129.0], [7.3, 130.0], [7.4, 130.0], [7.5, 130.0], [7.6, 130.0], [7.7, 130.0], [7.8, 131.0], [7.9, 131.0], [8.0, 131.0], [8.1, 131.0], [8.2, 131.0], [8.3, 131.0], [8.4, 132.0], [8.5, 132.0], [8.6, 132.0], [8.7, 132.0], [8.8, 133.0], [8.9, 133.0], [9.0, 133.0], [9.1, 133.0], [9.2, 134.0], [9.3, 134.0], [9.4, 134.0], [9.5, 134.0], [9.6, 135.0], [9.7, 135.0], [9.8, 135.0], [9.9, 136.0], [10.0, 136.0], [10.1, 136.0], [10.2, 136.0], [10.3, 136.0], [10.4, 136.0], [10.5, 136.0], [10.6, 137.0], [10.7, 137.0], [10.8, 137.0], [10.9, 137.0], [11.0, 137.0], [11.1, 138.0], [11.2, 138.0], [11.3, 138.0], [11.4, 138.0], [11.5, 138.0], [11.6, 139.0], [11.7, 139.0], [11.8, 139.0], [11.9, 139.0], [12.0, 139.0], [12.1, 139.0], [12.2, 139.0], [12.3, 139.0], [12.4, 139.0], [12.5, 139.0], [12.6, 140.0], [12.7, 140.0], [12.8, 140.0], [12.9, 140.0], [13.0, 141.0], [13.1, 141.0], [13.2, 141.0], [13.3, 141.0], [13.4, 142.0], [13.5, 142.0], [13.6, 142.0], [13.7, 142.0], [13.8, 142.0], [13.9, 142.0], [14.0, 142.0], [14.1, 143.0], [14.2, 143.0], [14.3, 143.0], [14.4, 143.0], [14.5, 143.0], [14.6, 143.0], [14.7, 143.0], [14.8, 144.0], [14.9, 144.0], [15.0, 144.0], [15.1, 144.0], [15.2, 144.0], [15.3, 145.0], [15.4, 145.0], [15.5, 145.0], [15.6, 145.0], [15.7, 145.0], [15.8, 145.0], [15.9, 145.0], [16.0, 146.0], [16.1, 146.0], [16.2, 146.0], [16.3, 146.0], [16.4, 146.0], [16.5, 146.0], [16.6, 146.0], [16.7, 147.0], [16.8, 147.0], [16.9, 147.0], [17.0, 147.0], [17.1, 147.0], [17.2, 147.0], [17.3, 148.0], [17.4, 148.0], [17.5, 148.0], [17.6, 148.0], [17.7, 148.0], [17.8, 148.0], [17.9, 148.0], [18.0, 148.0], [18.1, 149.0], [18.2, 149.0], [18.3, 149.0], [18.4, 149.0], [18.5, 150.0], [18.6, 150.0], [18.7, 150.0], [18.8, 150.0], [18.9, 150.0], [19.0, 150.0], [19.1, 151.0], [19.2, 151.0], [19.3, 151.0], [19.4, 151.0], [19.5, 151.0], [19.6, 151.0], [19.7, 151.0], [19.8, 152.0], [19.9, 152.0], [20.0, 152.0], [20.1, 152.0], [20.2, 152.0], [20.3, 153.0], [20.4, 153.0], [20.5, 153.0], [20.6, 153.0], [20.7, 153.0], [20.8, 154.0], [20.9, 154.0], [21.0, 154.0], [21.1, 154.0], [21.2, 154.0], [21.3, 154.0], [21.4, 154.0], [21.5, 154.0], [21.6, 154.0], [21.7, 154.0], [21.8, 155.0], [21.9, 155.0], [22.0, 155.0], [22.1, 156.0], [22.2, 156.0], [22.3, 156.0], [22.4, 156.0], [22.5, 156.0], [22.6, 156.0], [22.7, 157.0], [22.8, 157.0], [22.9, 157.0], [23.0, 157.0], [23.1, 157.0], [23.2, 157.0], [23.3, 157.0], [23.4, 158.0], [23.5, 158.0], [23.6, 158.0], [23.7, 158.0], [23.8, 158.0], [23.9, 158.0], [24.0, 158.0], [24.1, 159.0], [24.2, 159.0], [24.3, 159.0], [24.4, 159.0], [24.5, 159.0], [24.6, 159.0], [24.7, 159.0], [24.8, 160.0], [24.9, 160.0], [25.0, 160.0], [25.1, 160.0], [25.2, 160.0], [25.3, 160.0], [25.4, 161.0], [25.5, 161.0], [25.6, 161.0], [25.7, 161.0], [25.8, 161.0], [25.9, 161.0], [26.0, 161.0], [26.1, 162.0], [26.2, 162.0], [26.3, 162.0], [26.4, 162.0], [26.5, 162.0], [26.6, 162.0], [26.7, 162.0], [26.8, 162.0], [26.9, 162.0], [27.0, 162.0], [27.1, 162.0], [27.2, 163.0], [27.3, 163.0], [27.4, 163.0], [27.5, 163.0], [27.6, 164.0], [27.7, 164.0], [27.8, 164.0], [27.9, 164.0], [28.0, 165.0], [28.1, 165.0], [28.2, 165.0], [28.3, 165.0], [28.4, 166.0], [28.5, 166.0], [28.6, 167.0], [28.7, 167.0], [28.8, 167.0], [28.9, 168.0], [29.0, 168.0], [29.1, 168.0], [29.2, 168.0], [29.3, 168.0], [29.4, 168.0], [29.5, 168.0], [29.6, 169.0], [29.7, 169.0], [29.8, 169.0], [29.9, 169.0], [30.0, 169.0], [30.1, 170.0], [30.2, 170.0], [30.3, 171.0], [30.4, 171.0], [30.5, 171.0], [30.6, 172.0], [30.7, 172.0], [30.8, 172.0], [30.9, 173.0], [31.0, 173.0], [31.1, 174.0], [31.2, 174.0], [31.3, 174.0], [31.4, 174.0], [31.5, 174.0], [31.6, 174.0], [31.7, 174.0], [31.8, 174.0], [31.9, 174.0], [32.0, 174.0], [32.1, 175.0], [32.2, 175.0], [32.3, 175.0], [32.4, 175.0], [32.5, 175.0], [32.6, 176.0], [32.7, 176.0], [32.8, 176.0], [32.9, 176.0], [33.0, 176.0], [33.1, 176.0], [33.2, 177.0], [33.3, 177.0], [33.4, 177.0], [33.5, 177.0], [33.6, 177.0], [33.7, 178.0], [33.8, 178.0], [33.9, 178.0], [34.0, 178.0], [34.1, 178.0], [34.2, 179.0], [34.3, 179.0], [34.4, 179.0], [34.5, 180.0], [34.6, 180.0], [34.7, 180.0], [34.8, 181.0], [34.9, 181.0], [35.0, 181.0], [35.1, 181.0], [35.2, 181.0], [35.3, 181.0], [35.4, 182.0], [35.5, 182.0], [35.6, 183.0], [35.7, 183.0], [35.8, 183.0], [35.9, 183.0], [36.0, 183.0], [36.1, 184.0], [36.2, 184.0], [36.3, 185.0], [36.4, 185.0], [36.5, 185.0], [36.6, 186.0], [36.7, 186.0], [36.8, 186.0], [36.9, 186.0], [37.0, 186.0], [37.1, 187.0], [37.2, 187.0], [37.3, 187.0], [37.4, 188.0], [37.5, 188.0], [37.6, 188.0], [37.7, 188.0], [37.8, 188.0], [37.9, 189.0], [38.0, 189.0], [38.1, 189.0], [38.2, 190.0], [38.3, 191.0], [38.4, 191.0], [38.5, 191.0], [38.6, 191.0], [38.7, 191.0], [38.8, 191.0], [38.9, 191.0], [39.0, 191.0], [39.1, 192.0], [39.2, 192.0], [39.3, 192.0], [39.4, 192.0], [39.5, 192.0], [39.6, 192.0], [39.7, 192.0], [39.8, 193.0], [39.9, 193.0], [40.0, 193.0], [40.1, 193.0], [40.2, 194.0], [40.3, 194.0], [40.4, 195.0], [40.5, 195.0], [40.6, 196.0], [40.7, 196.0], [40.8, 196.0], [40.9, 196.0], [41.0, 197.0], [41.1, 197.0], [41.2, 197.0], [41.3, 197.0], [41.4, 197.0], [41.5, 198.0], [41.6, 199.0], [41.7, 199.0], [41.8, 199.0], [41.9, 199.0], [42.0, 200.0], [42.1, 200.0], [42.2, 200.0], [42.3, 201.0], [42.4, 201.0], [42.5, 201.0], [42.6, 202.0], [42.7, 202.0], [42.8, 203.0], [42.9, 203.0], [43.0, 203.0], [43.1, 204.0], [43.2, 204.0], [43.3, 205.0], [43.4, 205.0], [43.5, 205.0], [43.6, 205.0], [43.7, 205.0], [43.8, 206.0], [43.9, 206.0], [44.0, 206.0], [44.1, 208.0], [44.2, 208.0], [44.3, 209.0], [44.4, 209.0], [44.5, 210.0], [44.6, 210.0], [44.7, 210.0], [44.8, 211.0], [44.9, 211.0], [45.0, 212.0], [45.1, 212.0], [45.2, 213.0], [45.3, 213.0], [45.4, 214.0], [45.5, 214.0], [45.6, 215.0], [45.7, 215.0], [45.8, 216.0], [45.9, 216.0], [46.0, 216.0], [46.1, 216.0], [46.2, 217.0], [46.3, 217.0], [46.4, 217.0], [46.5, 217.0], [46.6, 218.0], [46.7, 218.0], [46.8, 219.0], [46.9, 220.0], [47.0, 220.0], [47.1, 222.0], [47.2, 222.0], [47.3, 223.0], [47.4, 224.0], [47.5, 224.0], [47.6, 224.0], [47.7, 225.0], [47.8, 225.0], [47.9, 225.0], [48.0, 226.0], [48.1, 226.0], [48.2, 227.0], [48.3, 228.0], [48.4, 229.0], [48.5, 229.0], [48.6, 231.0], [48.7, 231.0], [48.8, 232.0], [48.9, 232.0], [49.0, 233.0], [49.1, 234.0], [49.2, 234.0], [49.3, 234.0], [49.4, 235.0], [49.5, 236.0], [49.6, 236.0], [49.7, 237.0], [49.8, 238.0], [49.9, 238.0], [50.0, 239.0], [50.1, 240.0], [50.2, 240.0], [50.3, 241.0], [50.4, 241.0], [50.5, 241.0], [50.6, 242.0], [50.7, 242.0], [50.8, 243.0], [50.9, 243.0], [51.0, 244.0], [51.1, 245.0], [51.2, 246.0], [51.3, 246.0], [51.4, 247.0], [51.5, 247.0], [51.6, 249.0], [51.7, 249.0], [51.8, 251.0], [51.9, 252.0], [52.0, 252.0], [52.1, 253.0], [52.2, 253.0], [52.3, 254.0], [52.4, 254.0], [52.5, 254.0], [52.6, 255.0], [52.7, 255.0], [52.8, 256.0], [52.9, 258.0], [53.0, 258.0], [53.1, 260.0], [53.2, 260.0], [53.3, 263.0], [53.4, 263.0], [53.5, 263.0], [53.6, 264.0], [53.7, 265.0], [53.8, 266.0], [53.9, 266.0], [54.0, 266.0], [54.1, 266.0], [54.2, 267.0], [54.3, 268.0], [54.4, 270.0], [54.5, 271.0], [54.6, 274.0], [54.7, 275.0], [54.8, 277.0], [54.9, 279.0], [55.0, 279.0], [55.1, 280.0], [55.2, 280.0], [55.3, 284.0], [55.4, 284.0], [55.5, 284.0], [55.6, 285.0], [55.7, 287.0], [55.8, 291.0], [55.9, 293.0], [56.0, 293.0], [56.1, 294.0], [56.2, 295.0], [56.3, 297.0], [56.4, 297.0], [56.5, 299.0], [56.6, 303.0], [56.7, 304.0], [56.8, 304.0], [56.9, 304.0], [57.0, 305.0], [57.1, 307.0], [57.2, 308.0], [57.3, 313.0], [57.4, 314.0], [57.5, 314.0], [57.6, 317.0], [57.7, 318.0], [57.8, 319.0], [57.9, 319.0], [58.0, 320.0], [58.1, 327.0], [58.2, 327.0], [58.3, 332.0], [58.4, 332.0], [58.5, 336.0], [58.6, 341.0], [58.7, 344.0], [58.8, 357.0], [58.9, 358.0], [59.0, 365.0], [59.1, 413.0], [59.2, 417.0], [59.3, 431.0], [59.4, 443.0], [59.5, 480.0], [59.6, 513.0], [59.7, 540.0], [59.8, 584.0], [59.9, 618.0], [60.0, 619.0], [60.1, 629.0], [60.2, 645.0], [60.3, 659.0], [60.4, 667.0], [60.5, 691.0], [60.6, 698.0], [60.7, 704.0], [60.8, 707.0], [60.9, 707.0], [61.0, 744.0], [61.1, 745.0], [61.2, 751.0], [61.3, 777.0], [61.4, 781.0], [61.5, 806.0], [61.6, 807.0], [61.7, 810.0], [61.8, 815.0], [61.9, 821.0], [62.0, 852.0], [62.1, 859.0], [62.2, 877.0], [62.3, 912.0], [62.4, 913.0], [62.5, 950.0], [62.6, 969.0], [62.7, 987.0], [62.8, 1104.0], [62.9, 1109.0], [63.0, 1138.0], [63.1, 1139.0], [63.2, 1140.0], [63.3, 1147.0], [63.4, 1149.0], [63.5, 1157.0], [63.6, 1158.0], [63.7, 1168.0], [63.8, 1169.0], [63.9, 1171.0], [64.0, 1175.0], [64.1, 1176.0], [64.2, 1177.0], [64.3, 1180.0], [64.4, 1180.0], [64.5, 1184.0], [64.6, 1186.0], [64.7, 1187.0], [64.8, 1191.0], [64.9, 1194.0], [65.0, 1198.0], [65.1, 1200.0], [65.2, 1201.0], [65.3, 1205.0], [65.4, 1206.0], [65.5, 1212.0], [65.6, 1212.0], [65.7, 1214.0], [65.8, 1219.0], [65.9, 1225.0], [66.0, 1229.0], [66.1, 1229.0], [66.2, 1230.0], [66.3, 1230.0], [66.4, 1230.0], [66.5, 1232.0], [66.6, 1237.0], [66.7, 1237.0], [66.8, 1239.0], [66.9, 1241.0], [67.0, 1245.0], [67.1, 1245.0], [67.2, 1247.0], [67.3, 1249.0], [67.4, 1254.0], [67.5, 1268.0], [67.6, 1270.0], [67.7, 1272.0], [67.8, 1277.0], [67.9, 1278.0], [68.0, 1282.0], [68.1, 1286.0], [68.2, 1287.0], [68.3, 1291.0], [68.4, 1292.0], [68.5, 1293.0], [68.6, 1293.0], [68.7, 1295.0], [68.8, 1310.0], [68.9, 1312.0], [69.0, 1313.0], [69.1, 1317.0], [69.2, 1318.0], [69.3, 1320.0], [69.4, 1321.0], [69.5, 1324.0], [69.6, 1325.0], [69.7, 1326.0], [69.8, 1328.0], [69.9, 1328.0], [70.0, 1329.0], [70.1, 1334.0], [70.2, 1334.0], [70.3, 1338.0], [70.4, 1341.0], [70.5, 1348.0], [70.6, 1349.0], [70.7, 1350.0], [70.8, 1352.0], [70.9, 1352.0], [71.0, 1354.0], [71.1, 1358.0], [71.2, 1363.0], [71.3, 1365.0], [71.4, 1370.0], [71.5, 1374.0], [71.6, 1375.0], [71.7, 1375.0], [71.8, 1378.0], [71.9, 1380.0], [72.0, 1388.0], [72.1, 1390.0], [72.2, 1390.0], [72.3, 1405.0], [72.4, 1408.0], [72.5, 1409.0], [72.6, 1412.0], [72.7, 1418.0], [72.8, 1421.0], [72.9, 1422.0], [73.0, 1428.0], [73.1, 1428.0], [73.2, 1432.0], [73.3, 1435.0], [73.4, 1435.0], [73.5, 1436.0], [73.6, 1437.0], [73.7, 1438.0], [73.8, 1444.0], [73.9, 1445.0], [74.0, 1447.0], [74.1, 1447.0], [74.2, 1447.0], [74.3, 1452.0], [74.4, 1459.0], [74.5, 1463.0], [74.6, 1464.0], [74.7, 1465.0], [74.8, 1470.0], [74.9, 1471.0], [75.0, 1472.0], [75.1, 1473.0], [75.2, 1475.0], [75.3, 1486.0], [75.4, 1487.0], [75.5, 1487.0], [75.6, 1487.0], [75.7, 1493.0], [75.8, 1496.0], [75.9, 1497.0], [76.0, 1501.0], [76.1, 1503.0], [76.2, 1504.0], [76.3, 1506.0], [76.4, 1508.0], [76.5, 1510.0], [76.6, 1511.0], [76.7, 1514.0], [76.8, 1516.0], [76.9, 1518.0], [77.0, 1519.0], [77.1, 1522.0], [77.2, 1523.0], [77.3, 1525.0], [77.4, 1527.0], [77.5, 1531.0], [77.6, 1533.0], [77.7, 1533.0], [77.8, 1540.0], [77.9, 1541.0], [78.0, 1544.0], [78.1, 1544.0], [78.2, 1544.0], [78.3, 1546.0], [78.4, 1548.0], [78.5, 1549.0], [78.6, 1550.0], [78.7, 1550.0], [78.8, 1551.0], [78.9, 1552.0], [79.0, 1555.0], [79.1, 1555.0], [79.2, 1557.0], [79.3, 1563.0], [79.4, 1564.0], [79.5, 1569.0], [79.6, 1575.0], [79.7, 1576.0], [79.8, 1584.0], [79.9, 1591.0], [80.0, 1594.0], [80.1, 1596.0], [80.2, 1599.0], [80.3, 1601.0], [80.4, 1604.0], [80.5, 1604.0], [80.6, 1604.0], [80.7, 1609.0], [80.8, 1612.0], [80.9, 1616.0], [81.0, 1622.0], [81.1, 1624.0], [81.2, 1625.0], [81.3, 1629.0], [81.4, 1633.0], [81.5, 1640.0], [81.6, 1642.0], [81.7, 1647.0], [81.8, 1649.0], [81.9, 1656.0], [82.0, 1661.0], [82.1, 1663.0], [82.2, 1668.0], [82.3, 1676.0], [82.4, 1678.0], [82.5, 1689.0], [82.6, 1691.0], [82.7, 1692.0], [82.8, 1695.0], [82.9, 1710.0], [83.0, 1714.0], [83.1, 1715.0], [83.2, 1717.0], [83.3, 1730.0], [83.4, 1733.0], [83.5, 1740.0], [83.6, 1741.0], [83.7, 1742.0], [83.8, 1751.0], [83.9, 1752.0], [84.0, 1755.0], [84.1, 1759.0], [84.2, 1769.0], [84.3, 1776.0], [84.4, 1776.0], [84.5, 1786.0], [84.6, 1790.0], [84.7, 1790.0], [84.8, 1792.0], [84.9, 1792.0], [85.0, 1794.0], [85.1, 1796.0], [85.2, 1798.0], [85.3, 1804.0], [85.4, 1804.0], [85.5, 1812.0], [85.6, 1814.0], [85.7, 1819.0], [85.8, 1824.0], [85.9, 1825.0], [86.0, 1828.0], [86.1, 1830.0], [86.2, 1834.0], [86.3, 1836.0], [86.4, 1838.0], [86.5, 1853.0], [86.6, 1857.0], [86.7, 1864.0], [86.8, 1868.0], [86.9, 1873.0], [87.0, 1880.0], [87.1, 1880.0], [87.2, 1886.0], [87.3, 1895.0], [87.4, 1899.0], [87.5, 1902.0], [87.6, 1903.0], [87.7, 1904.0], [87.8, 1941.0], [87.9, 1945.0], [88.0, 1945.0], [88.1, 1950.0], [88.2, 1954.0], [88.3, 1961.0], [88.4, 1961.0], [88.5, 1976.0], [88.6, 1976.0], [88.7, 1976.0], [88.8, 1993.0], [88.9, 1998.0], [89.0, 2014.0], [89.1, 2020.0], [89.2, 2022.0], [89.3, 2035.0], [89.4, 2036.0], [89.5, 2089.0], [89.6, 2096.0], [89.7, 2096.0], [89.8, 2109.0], [89.9, 2117.0], [90.0, 2135.0], [90.1, 2142.0], [90.2, 2188.0], [90.3, 2199.0], [90.4, 2204.0], [90.5, 2217.0], [90.6, 2234.0], [90.7, 2234.0], [90.8, 2250.0], [90.9, 2257.0], [91.0, 2270.0], [91.1, 2275.0], [91.2, 2281.0], [91.3, 2329.0], [91.4, 2341.0], [91.5, 2384.0], [91.6, 2389.0], [91.7, 2394.0], [91.8, 2422.0], [91.9, 2429.0], [92.0, 2454.0], [92.1, 2496.0], [92.2, 2507.0], [92.3, 2526.0], [92.4, 2558.0], [92.5, 2629.0], [92.6, 2658.0], [92.7, 2693.0], [92.8, 2755.0], [92.9, 2759.0], [93.0, 2794.0], [93.1, 2796.0], [93.2, 2856.0], [93.3, 2906.0], [93.4, 2928.0], [93.5, 2938.0], [93.6, 2961.0], [93.7, 2967.0], [93.8, 3015.0], [93.9, 3066.0], [94.0, 3074.0], [94.1, 3133.0], [94.2, 3243.0], [94.3, 3266.0], [94.4, 3291.0], [94.5, 3454.0], [94.6, 3471.0], [94.7, 3507.0], [94.8, 3546.0], [94.9, 3606.0], [95.0, 3702.0], [95.1, 3807.0], [95.2, 3865.0], [95.3, 3911.0], [95.4, 4017.0], [95.5, 4080.0], [95.6, 4106.0], [95.7, 4109.0], [95.8, 4124.0], [95.9, 4138.0], [96.0, 4165.0], [96.1, 4206.0], [96.2, 4206.0], [96.3, 4306.0], [96.4, 4359.0], [96.5, 4470.0], [96.6, 4522.0], [96.7, 4544.0], [96.8, 4572.0], [96.9, 4707.0], [97.0, 4771.0], [97.1, 4849.0], [97.2, 4857.0], [97.3, 5069.0], [97.4, 5093.0], [97.5, 5366.0], [97.6, 5408.0], [97.7, 5434.0], [97.8, 5732.0], [97.9, 5938.0], [98.0, 6726.0], [98.1, 6845.0], [98.2, 6893.0], [98.3, 7270.0], [98.4, 7572.0], [98.5, 7764.0], [98.6, 8005.0], [98.7, 8361.0], [98.8, 8416.0], [98.9, 8434.0], [99.0, 9191.0], [99.1, 9308.0], [99.2, 9322.0], [99.3, 10114.0], [99.4, 10558.0], [99.5, 11988.0], [99.6, 12186.0], [99.7, 14633.0], [99.8, 18031.0], [99.9, 18693.0]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[0.0, 98.0], [0.1, 99.0], [0.2, 100.0], [0.3, 101.0], [0.4, 101.0], [0.5, 103.0], [0.6, 104.0], [0.7, 104.0], [0.8, 105.0], [0.9, 105.0], [1.0, 107.0], [1.1, 109.0], [1.2, 109.0], [1.3, 109.0], [1.4, 109.0], [1.5, 110.0], [1.6, 110.0], [1.7, 110.0], [1.8, 111.0], [1.9, 111.0], [2.0, 113.0], [2.1, 114.0], [2.2, 114.0], [2.3, 114.0], [2.4, 114.0], [2.5, 115.0], [2.6, 115.0], [2.7, 115.0], [2.8, 116.0], [2.9, 116.0], [3.0, 117.0], [3.1, 117.0], [3.2, 118.0], [3.3, 119.0], [3.4, 119.0], [3.5, 120.0], [3.6, 120.0], [3.7, 120.0], [3.8, 121.0], [3.9, 121.0], [4.0, 122.0], [4.1, 122.0], [4.2, 122.0], [4.3, 122.0], [4.4, 123.0], [4.5, 123.0], [4.6, 123.0], [4.7, 123.0], [4.8, 124.0], [4.9, 124.0], [5.0, 125.0], [5.1, 125.0], [5.2, 125.0], [5.3, 125.0], [5.4, 125.0], [5.5, 125.0], [5.6, 126.0], [5.7, 126.0], [5.8, 126.0], [5.9, 126.0], [6.0, 127.0], [6.1, 127.0], [6.2, 127.0], [6.3, 127.0], [6.4, 127.0], [6.5, 127.0], [6.6, 128.0], [6.7, 128.0], [6.8, 128.0], [6.9, 129.0], [7.0, 129.0], [7.1, 129.0], [7.2, 129.0], [7.3, 130.0], [7.4, 130.0], [7.5, 130.0], [7.6, 131.0], [7.7, 131.0], [7.8, 131.0], [7.9, 131.0], [8.0, 131.0], [8.1, 131.0], [8.2, 131.0], [8.3, 132.0], [8.4, 132.0], [8.5, 132.0], [8.6, 132.0], [8.7, 132.0], [8.8, 133.0], [8.9, 133.0], [9.0, 133.0], [9.1, 134.0], [9.2, 134.0], [9.3, 134.0], [9.4, 134.0], [9.5, 135.0], [9.6, 135.0], [9.7, 135.0], [9.8, 135.0], [9.9, 136.0], [10.0, 137.0], [10.1, 137.0], [10.2, 137.0], [10.3, 137.0], [10.4, 137.0], [10.5, 137.0], [10.6, 137.0], [10.7, 138.0], [10.8, 138.0], [10.9, 138.0], [11.0, 138.0], [11.1, 138.0], [11.2, 138.0], [11.3, 139.0], [11.4, 139.0], [11.5, 139.0], [11.6, 139.0], [11.7, 139.0], [11.8, 140.0], [11.9, 140.0], [12.0, 140.0], [12.1, 140.0], [12.2, 140.0], [12.3, 140.0], [12.4, 140.0], [12.5, 141.0], [12.6, 141.0], [12.7, 142.0], [12.8, 142.0], [12.9, 142.0], [13.0, 142.0], [13.1, 142.0], [13.2, 142.0], [13.3, 143.0], [13.4, 143.0], [13.5, 143.0], [13.6, 143.0], [13.7, 143.0], [13.8, 143.0], [13.9, 143.0], [14.0, 144.0], [14.1, 144.0], [14.2, 144.0], [14.3, 144.0], [14.4, 144.0], [14.5, 145.0], [14.6, 145.0], [14.7, 145.0], [14.8, 145.0], [14.9, 145.0], [15.0, 145.0], [15.1, 145.0], [15.2, 145.0], [15.3, 146.0], [15.4, 146.0], [15.5, 146.0], [15.6, 146.0], [15.7, 146.0], [15.8, 147.0], [15.9, 147.0], [16.0, 147.0], [16.1, 147.0], [16.2, 148.0], [16.3, 148.0], [16.4, 148.0], [16.5, 148.0], [16.6, 148.0], [16.7, 148.0], [16.8, 148.0], [16.9, 148.0], [17.0, 149.0], [17.1, 149.0], [17.2, 149.0], [17.3, 149.0], [17.4, 149.0], [17.5, 150.0], [17.6, 150.0], [17.7, 150.0], [17.8, 150.0], [17.9, 150.0], [18.0, 150.0], [18.1, 150.0], [18.2, 150.0], [18.3, 150.0], [18.4, 151.0], [18.5, 151.0], [18.6, 151.0], [18.7, 151.0], [18.8, 151.0], [18.9, 151.0], [19.0, 151.0], [19.1, 151.0], [19.2, 151.0], [19.3, 152.0], [19.4, 152.0], [19.5, 152.0], [19.6, 153.0], [19.7, 153.0], [19.8, 153.0], [19.9, 153.0], [20.0, 153.0], [20.1, 153.0], [20.2, 153.0], [20.3, 153.0], [20.4, 153.0], [20.5, 154.0], [20.6, 154.0], [20.7, 154.0], [20.8, 154.0], [20.9, 155.0], [21.0, 155.0], [21.1, 155.0], [21.2, 155.0], [21.3, 155.0], [21.4, 155.0], [21.5, 155.0], [21.6, 156.0], [21.7, 156.0], [21.8, 156.0], [21.9, 156.0], [22.0, 156.0], [22.1, 156.0], [22.2, 157.0], [22.3, 157.0], [22.4, 157.0], [22.5, 157.0], [22.6, 157.0], [22.7, 157.0], [22.8, 157.0], [22.9, 157.0], [23.0, 158.0], [23.1, 158.0], [23.2, 158.0], [23.3, 158.0], [23.4, 158.0], [23.5, 159.0], [23.6, 159.0], [23.7, 159.0], [23.8, 159.0], [23.9, 159.0], [24.0, 159.0], [24.1, 160.0], [24.2, 160.0], [24.3, 160.0], [24.4, 160.0], [24.5, 160.0], [24.6, 160.0], [24.7, 160.0], [24.8, 160.0], [24.9, 161.0], [25.0, 161.0], [25.1, 161.0], [25.2, 161.0], [25.3, 161.0], [25.4, 161.0], [25.5, 162.0], [25.6, 162.0], [25.7, 162.0], [25.8, 162.0], [25.9, 162.0], [26.0, 162.0], [26.1, 163.0], [26.2, 163.0], [26.3, 163.0], [26.4, 163.0], [26.5, 163.0], [26.6, 163.0], [26.7, 163.0], [26.8, 164.0], [26.9, 164.0], [27.0, 164.0], [27.1, 164.0], [27.2, 164.0], [27.3, 165.0], [27.4, 165.0], [27.5, 165.0], [27.6, 165.0], [27.7, 165.0], [27.8, 165.0], [27.9, 166.0], [28.0, 166.0], [28.1, 166.0], [28.2, 166.0], [28.3, 167.0], [28.4, 167.0], [28.5, 167.0], [28.6, 167.0], [28.7, 167.0], [28.8, 167.0], [28.9, 167.0], [29.0, 167.0], [29.1, 168.0], [29.2, 168.0], [29.3, 168.0], [29.4, 168.0], [29.5, 168.0], [29.6, 169.0], [29.7, 170.0], [29.8, 170.0], [29.9, 170.0], [30.0, 170.0], [30.1, 170.0], [30.2, 170.0], [30.3, 171.0], [30.4, 171.0], [30.5, 171.0], [30.6, 171.0], [30.7, 172.0], [30.8, 172.0], [30.9, 172.0], [31.0, 173.0], [31.1, 173.0], [31.2, 173.0], [31.3, 173.0], [31.4, 173.0], [31.5, 173.0], [31.6, 173.0], [31.7, 173.0], [31.8, 174.0], [31.9, 174.0], [32.0, 174.0], [32.1, 174.0], [32.2, 174.0], [32.3, 175.0], [32.4, 175.0], [32.5, 176.0], [32.6, 176.0], [32.7, 176.0], [32.8, 176.0], [32.9, 176.0], [33.0, 176.0], [33.1, 176.0], [33.2, 176.0], [33.3, 177.0], [33.4, 177.0], [33.5, 177.0], [33.6, 177.0], [33.7, 178.0], [33.8, 178.0], [33.9, 178.0], [34.0, 178.0], [34.1, 178.0], [34.2, 179.0], [34.3, 179.0], [34.4, 179.0], [34.5, 179.0], [34.6, 179.0], [34.7, 179.0], [34.8, 179.0], [34.9, 180.0], [35.0, 180.0], [35.1, 180.0], [35.2, 181.0], [35.3, 181.0], [35.4, 181.0], [35.5, 182.0], [35.6, 182.0], [35.7, 182.0], [35.8, 182.0], [35.9, 182.0], [36.0, 183.0], [36.1, 183.0], [36.2, 183.0], [36.3, 183.0], [36.4, 183.0], [36.5, 184.0], [36.6, 184.0], [36.7, 184.0], [36.8, 184.0], [36.9, 185.0], [37.0, 185.0], [37.1, 186.0], [37.2, 187.0], [37.3, 187.0], [37.4, 187.0], [37.5, 187.0], [37.6, 187.0], [37.7, 187.0], [37.8, 188.0], [37.9, 188.0], [38.0, 188.0], [38.1, 189.0], [38.2, 189.0], [38.3, 190.0], [38.4, 190.0], [38.5, 190.0], [38.6, 190.0], [38.7, 190.0], [38.8, 191.0], [38.9, 191.0], [39.0, 191.0], [39.1, 191.0], [39.2, 191.0], [39.3, 192.0], [39.4, 192.0], [39.5, 192.0], [39.6, 192.0], [39.7, 192.0], [39.8, 193.0], [39.9, 194.0], [40.0, 195.0], [40.1, 195.0], [40.2, 195.0], [40.3, 196.0], [40.4, 196.0], [40.5, 196.0], [40.6, 196.0], [40.7, 196.0], [40.8, 197.0], [40.9, 197.0], [41.0, 197.0], [41.1, 198.0], [41.2, 198.0], [41.3, 198.0], [41.4, 198.0], [41.5, 198.0], [41.6, 199.0], [41.7, 199.0], [41.8, 200.0], [41.9, 200.0], [42.0, 200.0], [42.1, 201.0], [42.2, 201.0], [42.3, 201.0], [42.4, 202.0], [42.5, 202.0], [42.6, 202.0], [42.7, 202.0], [42.8, 203.0], [42.9, 204.0], [43.0, 204.0], [43.1, 204.0], [43.2, 205.0], [43.3, 205.0], [43.4, 205.0], [43.5, 205.0], [43.6, 205.0], [43.7, 205.0], [43.8, 205.0], [43.9, 206.0], [44.0, 206.0], [44.1, 207.0], [44.2, 207.0], [44.3, 207.0], [44.4, 207.0], [44.5, 207.0], [44.6, 207.0], [44.7, 207.0], [44.8, 208.0], [44.9, 208.0], [45.0, 208.0], [45.1, 209.0], [45.2, 209.0], [45.3, 210.0], [45.4, 210.0], [45.5, 210.0], [45.6, 210.0], [45.7, 210.0], [45.8, 210.0], [45.9, 210.0], [46.0, 211.0], [46.1, 211.0], [46.2, 211.0], [46.3, 211.0], [46.4, 211.0], [46.5, 212.0], [46.6, 212.0], [46.7, 212.0], [46.8, 213.0], [46.9, 213.0], [47.0, 213.0], [47.1, 214.0], [47.2, 214.0], [47.3, 214.0], [47.4, 215.0], [47.5, 215.0], [47.6, 215.0], [47.7, 215.0], [47.8, 216.0], [47.9, 216.0], [48.0, 217.0], [48.1, 217.0], [48.2, 217.0], [48.3, 218.0], [48.4, 218.0], [48.5, 218.0], [48.6, 218.0], [48.7, 219.0], [48.8, 220.0], [48.9, 220.0], [49.0, 220.0], [49.1, 221.0], [49.2, 221.0], [49.3, 222.0], [49.4, 222.0], [49.5, 223.0], [49.6, 223.0], [49.7, 223.0], [49.8, 224.0], [49.9, 224.0], [50.0, 224.0], [50.1, 224.0], [50.2, 225.0], [50.3, 226.0], [50.4, 227.0], [50.5, 227.0], [50.6, 228.0], [50.7, 228.0], [50.8, 230.0], [50.9, 232.0], [51.0, 232.0], [51.1, 233.0], [51.2, 233.0], [51.3, 233.0], [51.4, 233.0], [51.5, 234.0], [51.6, 236.0], [51.7, 236.0], [51.8, 236.0], [51.9, 237.0], [52.0, 237.0], [52.1, 237.0], [52.2, 238.0], [52.3, 239.0], [52.4, 239.0], [52.5, 239.0], [52.6, 239.0], [52.7, 240.0], [52.8, 240.0], [52.9, 240.0], [53.0, 241.0], [53.1, 242.0], [53.2, 243.0], [53.3, 244.0], [53.4, 245.0], [53.5, 245.0], [53.6, 246.0], [53.7, 246.0], [53.8, 247.0], [53.9, 248.0], [54.0, 248.0], [54.1, 249.0], [54.2, 250.0], [54.3, 251.0], [54.4, 251.0], [54.5, 251.0], [54.6, 251.0], [54.7, 251.0], [54.8, 253.0], [54.9, 253.0], [55.0, 253.0], [55.1, 253.0], [55.2, 254.0], [55.3, 255.0], [55.4, 255.0], [55.5, 255.0], [55.6, 255.0], [55.7, 257.0], [55.8, 257.0], [55.9, 257.0], [56.0, 257.0], [56.1, 260.0], [56.2, 261.0], [56.3, 262.0], [56.4, 262.0], [56.5, 263.0], [56.6, 264.0], [56.7, 266.0], [56.8, 266.0], [56.9, 267.0], [57.0, 267.0], [57.1, 268.0], [57.2, 269.0], [57.3, 272.0], [57.4, 272.0], [57.5, 274.0], [57.6, 277.0], [57.7, 278.0], [57.8, 281.0], [57.9, 283.0], [58.0, 286.0], [58.1, 289.0], [58.2, 290.0], [58.3, 293.0], [58.4, 294.0], [58.5, 295.0], [58.6, 310.0], [58.7, 313.0], [58.8, 318.0], [58.9, 321.0], [59.0, 322.0], [59.1, 327.0], [59.2, 328.0], [59.3, 341.0], [59.4, 352.0], [59.5, 366.0], [59.6, 403.0], [59.7, 410.0], [59.8, 428.0], [59.9, 498.0], [60.0, 552.0], [60.1, 555.0], [60.2, 559.0], [60.3, 577.0], [60.4, 611.0], [60.5, 620.0], [60.6, 620.0], [60.7, 637.0], [60.8, 642.0], [60.9, 670.0], [61.0, 686.0], [61.1, 686.0], [61.2, 690.0], [61.3, 704.0], [61.4, 716.0], [61.5, 723.0], [61.6, 724.0], [61.7, 735.0], [61.8, 758.0], [61.9, 775.0], [62.0, 781.0], [62.1, 793.0], [62.2, 797.0], [62.3, 806.0], [62.4, 819.0], [62.5, 825.0], [62.6, 830.0], [62.7, 845.0], [62.8, 854.0], [62.9, 886.0], [63.0, 889.0], [63.1, 892.0], [63.2, 894.0], [63.3, 906.0], [63.4, 906.0], [63.5, 923.0], [63.6, 937.0], [63.7, 953.0], [63.8, 985.0], [63.9, 986.0], [64.0, 992.0], [64.1, 1112.0], [64.2, 1120.0], [64.3, 1133.0], [64.4, 1133.0], [64.5, 1139.0], [64.6, 1145.0], [64.7, 1147.0], [64.8, 1153.0], [64.9, 1153.0], [65.0, 1157.0], [65.1, 1158.0], [65.2, 1158.0], [65.3, 1160.0], [65.4, 1161.0], [65.5, 1166.0], [65.6, 1167.0], [65.7, 1169.0], [65.8, 1171.0], [65.9, 1172.0], [66.0, 1174.0], [66.1, 1175.0], [66.2, 1177.0], [66.3, 1179.0], [66.4, 1179.0], [66.5, 1185.0], [66.6, 1186.0], [66.7, 1186.0], [66.8, 1191.0], [66.9, 1192.0], [67.0, 1195.0], [67.1, 1195.0], [67.2, 1198.0], [67.3, 1198.0], [67.4, 1198.0], [67.5, 1201.0], [67.6, 1202.0], [67.7, 1203.0], [67.8, 1206.0], [67.9, 1206.0], [68.0, 1210.0], [68.1, 1211.0], [68.2, 1211.0], [68.3, 1214.0], [68.4, 1216.0], [68.5, 1219.0], [68.6, 1220.0], [68.7, 1222.0], [68.8, 1223.0], [68.9, 1223.0], [69.0, 1231.0], [69.1, 1231.0], [69.2, 1235.0], [69.3, 1248.0], [69.4, 1251.0], [69.5, 1257.0], [69.6, 1258.0], [69.7, 1259.0], [69.8, 1261.0], [69.9, 1266.0], [70.0, 1268.0], [70.1, 1271.0], [70.2, 1273.0], [70.3, 1280.0], [70.4, 1282.0], [70.5, 1287.0], [70.6, 1287.0], [70.7, 1288.0], [70.8, 1296.0], [70.9, 1297.0], [71.0, 1302.0], [71.1, 1306.0], [71.2, 1307.0], [71.3, 1318.0], [71.4, 1323.0], [71.5, 1327.0], [71.6, 1328.0], [71.7, 1331.0], [71.8, 1337.0], [71.9, 1342.0], [72.0, 1349.0], [72.1, 1355.0], [72.2, 1355.0], [72.3, 1357.0], [72.4, 1358.0], [72.5, 1362.0], [72.6, 1362.0], [72.7, 1370.0], [72.8, 1373.0], [72.9, 1382.0], [73.0, 1387.0], [73.1, 1389.0], [73.2, 1389.0], [73.3, 1391.0], [73.4, 1402.0], [73.5, 1408.0], [73.6, 1410.0], [73.7, 1412.0], [73.8, 1420.0], [73.9, 1422.0], [74.0, 1422.0], [74.1, 1430.0], [74.2, 1432.0], [74.3, 1434.0], [74.4, 1434.0], [74.5, 1435.0], [74.6, 1436.0], [74.7, 1438.0], [74.8, 1440.0], [74.9, 1440.0], [75.0, 1445.0], [75.1, 1448.0], [75.2, 1449.0], [75.3, 1455.0], [75.4, 1455.0], [75.5, 1458.0], [75.6, 1463.0], [75.7, 1464.0], [75.8, 1465.0], [75.9, 1467.0], [76.0, 1473.0], [76.1, 1474.0], [76.2, 1476.0], [76.3, 1479.0], [76.4, 1480.0], [76.5, 1483.0], [76.6, 1487.0], [76.7, 1487.0], [76.8, 1497.0], [76.9, 1498.0], [77.0, 1500.0], [77.1, 1504.0], [77.2, 1504.0], [77.3, 1506.0], [77.4, 1507.0], [77.5, 1509.0], [77.6, 1510.0], [77.7, 1515.0], [77.8, 1517.0], [77.9, 1517.0], [78.0, 1518.0], [78.1, 1519.0], [78.2, 1522.0], [78.3, 1527.0], [78.4, 1531.0], [78.5, 1532.0], [78.6, 1533.0], [78.7, 1534.0], [78.8, 1535.0], [78.9, 1535.0], [79.0, 1542.0], [79.1, 1543.0], [79.2, 1545.0], [79.3, 1546.0], [79.4, 1547.0], [79.5, 1551.0], [79.6, 1552.0], [79.7, 1554.0], [79.8, 1560.0], [79.9, 1561.0], [80.0, 1564.0], [80.1, 1567.0], [80.2, 1568.0], [80.3, 1570.0], [80.4, 1571.0], [80.5, 1580.0], [80.6, 1582.0], [80.7, 1585.0], [80.8, 1587.0], [80.9, 1587.0], [81.0, 1595.0], [81.1, 1599.0], [81.2, 1599.0], [81.3, 1601.0], [81.4, 1601.0], [81.5, 1604.0], [81.6, 1606.0], [81.7, 1607.0], [81.8, 1612.0], [81.9, 1615.0], [82.0, 1617.0], [82.1, 1618.0], [82.2, 1622.0], [82.3, 1628.0], [82.4, 1629.0], [82.5, 1630.0], [82.6, 1634.0], [82.7, 1635.0], [82.8, 1638.0], [82.9, 1638.0], [83.0, 1640.0], [83.1, 1640.0], [83.2, 1642.0], [83.3, 1644.0], [83.4, 1649.0], [83.5, 1654.0], [83.6, 1657.0], [83.7, 1658.0], [83.8, 1667.0], [83.9, 1670.0], [84.0, 1675.0], [84.1, 1681.0], [84.2, 1684.0], [84.3, 1705.0], [84.4, 1708.0], [84.5, 1710.0], [84.6, 1724.0], [84.7, 1733.0], [84.8, 1735.0], [84.9, 1736.0], [85.0, 1742.0], [85.1, 1746.0], [85.2, 1749.0], [85.3, 1756.0], [85.4, 1756.0], [85.5, 1758.0], [85.6, 1761.0], [85.7, 1769.0], [85.8, 1771.0], [85.9, 1778.0], [86.0, 1786.0], [86.1, 1787.0], [86.2, 1788.0], [86.3, 1795.0], [86.4, 1801.0], [86.5, 1806.0], [86.6, 1808.0], [86.7, 1813.0], [86.8, 1825.0], [86.9, 1828.0], [87.0, 1837.0], [87.1, 1841.0], [87.2, 1841.0], [87.3, 1847.0], [87.4, 1848.0], [87.5, 1853.0], [87.6, 1858.0], [87.7, 1858.0], [87.8, 1878.0], [87.9, 1885.0], [88.0, 1885.0], [88.1, 1885.0], [88.2, 1885.0], [88.3, 1891.0], [88.4, 1891.0], [88.5, 1895.0], [88.6, 1895.0], [88.7, 1898.0], [88.8, 1902.0], [88.9, 1903.0], [89.0, 1909.0], [89.1, 1917.0], [89.2, 1919.0], [89.3, 1920.0], [89.4, 1930.0], [89.5, 1934.0], [89.6, 1942.0], [89.7, 1948.0], [89.8, 1958.0], [89.9, 1966.0], [90.0, 1972.0], [90.1, 1972.0], [90.2, 1973.0], [90.3, 1974.0], [90.4, 1975.0], [90.5, 1986.0], [90.6, 1991.0], [90.7, 1993.0], [90.8, 2032.0], [90.9, 2059.0], [91.0, 2069.0], [91.1, 2117.0], [91.2, 2123.0], [91.3, 2130.0], [91.4, 2168.0], [91.5, 2204.0], [91.6, 2236.0], [91.7, 2250.0], [91.8, 2255.0], [91.9, 2256.0], [92.0, 2326.0], [92.1, 2327.0], [92.2, 2334.0], [92.3, 2343.0], [92.4, 2344.0], [92.5, 2366.0], [92.6, 2367.0], [92.7, 2369.0], [92.8, 2373.0], [92.9, 2382.0], [93.0, 2393.0], [93.1, 2396.0], [93.2, 2412.0], [93.3, 2484.0], [93.4, 2484.0], [93.5, 2558.0], [93.6, 2569.0], [93.7, 2598.0], [93.8, 2622.0], [93.9, 2645.0], [94.0, 2734.0], [94.1, 2738.0], [94.2, 2795.0], [94.3, 2812.0], [94.4, 2818.0], [94.5, 2843.0], [94.6, 2844.0], [94.7, 2878.0], [94.8, 2937.0], [94.9, 2948.0], [95.0, 2995.0], [95.1, 3014.0], [95.2, 3029.0], [95.3, 3170.0], [95.4, 3193.0], [95.5, 3271.0], [95.6, 3318.0], [95.7, 3320.0], [95.8, 3430.0], [95.9, 3447.0], [96.0, 3510.0], [96.1, 3640.0], [96.2, 3711.0], [96.3, 3722.0], [96.4, 3780.0], [96.5, 3810.0], [96.6, 3823.0], [96.7, 3863.0], [96.8, 3942.0], [96.9, 3955.0], [97.0, 4029.0], [97.1, 4048.0], [97.2, 4080.0], [97.3, 4136.0], [97.4, 4159.0], [97.5, 4457.0], [97.6, 4592.0], [97.7, 4720.0], [97.8, 4867.0], [97.9, 5025.0], [98.0, 5381.0], [98.1, 5393.0], [98.2, 5431.0], [98.3, 5694.0], [98.4, 5697.0], [98.5, 6400.0], [98.6, 6519.0], [98.7, 6937.0], [98.8, 7567.0], [98.9, 8387.0], [99.0, 8469.0], [99.1, 8800.0], [99.2, 9196.0], [99.3, 10386.0], [99.4, 13004.0], [99.5, 13964.0], [99.6, 15919.0], [99.7, 24952.0], [99.8, 27856.0], [99.9, 44435.0]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[0.0, 44.0], [0.1, 45.0], [0.2, 48.0], [0.3, 50.0], [0.4, 50.0], [0.5, 52.0], [0.6, 52.0], [0.7, 53.0], [0.8, 56.0], [0.9, 56.0], [1.0, 56.0], [1.1, 57.0], [1.2, 57.0], [1.3, 58.0], [1.4, 59.0], [1.5, 59.0], [1.6, 59.0], [1.7, 59.0], [1.8, 60.0], [1.9, 60.0], [2.0, 61.0], [2.1, 61.0], [2.2, 61.0], [2.3, 62.0], [2.4, 63.0], [2.5, 63.0], [2.6, 63.0], [2.7, 63.0], [2.8, 64.0], [2.9, 64.0], [3.0, 65.0], [3.1, 65.0], [3.2, 65.0], [3.3, 65.0], [3.4, 65.0], [3.5, 66.0], [3.6, 66.0], [3.7, 66.0], [3.8, 66.0], [3.9, 66.0], [4.0, 66.0], [4.1, 67.0], [4.2, 67.0], [4.3, 67.0], [4.4, 67.0], [4.5, 68.0], [4.6, 68.0], [4.7, 69.0], [4.8, 69.0], [4.9, 69.0], [5.0, 69.0], [5.1, 69.0], [5.2, 69.0], [5.3, 69.0], [5.4, 70.0], [5.5, 70.0], [5.6, 70.0], [5.7, 70.0], [5.8, 70.0], [5.9, 70.0], [6.0, 71.0], [6.1, 71.0], [6.2, 71.0], [6.3, 71.0], [6.4, 71.0], [6.5, 71.0], [6.6, 71.0], [6.7, 72.0], [6.8, 72.0], [6.9, 72.0], [7.0, 72.0], [7.1, 72.0], [7.2, 72.0], [7.3, 72.0], [7.4, 72.0], [7.5, 73.0], [7.6, 73.0], [7.7, 73.0], [7.8, 73.0], [7.9, 73.0], [8.0, 73.0], [8.1, 73.0], [8.2, 74.0], [8.3, 74.0], [8.4, 74.0], [8.5, 75.0], [8.6, 75.0], [8.7, 75.0], [8.8, 75.0], [8.9, 75.0], [9.0, 76.0], [9.1, 76.0], [9.2, 76.0], [9.3, 76.0], [9.4, 76.0], [9.5, 76.0], [9.6, 76.0], [9.7, 76.0], [9.8, 76.0], [9.9, 76.0], [10.0, 77.0], [10.1, 77.0], [10.2, 77.0], [10.3, 77.0], [10.4, 77.0], [10.5, 78.0], [10.6, 78.0], [10.7, 78.0], [10.8, 78.0], [10.9, 78.0], [11.0, 78.0], [11.1, 79.0], [11.2, 79.0], [11.3, 79.0], [11.4, 79.0], [11.5, 79.0], [11.6, 79.0], [11.7, 79.0], [11.8, 80.0], [11.9, 80.0], [12.0, 80.0], [12.1, 80.0], [12.2, 80.0], [12.3, 81.0], [12.4, 81.0], [12.5, 81.0], [12.6, 81.0], [12.7, 81.0], [12.8, 81.0], [12.9, 81.0], [13.0, 81.0], [13.1, 82.0], [13.2, 82.0], [13.3, 82.0], [13.4, 82.0], [13.5, 82.0], [13.6, 82.0], [13.7, 82.0], [13.8, 83.0], [13.9, 83.0], [14.0, 83.0], [14.1, 83.0], [14.2, 83.0], [14.3, 83.0], [14.4, 83.0], [14.5, 83.0], [14.6, 83.0], [14.7, 84.0], [14.8, 84.0], [14.9, 84.0], [15.0, 84.0], [15.1, 84.0], [15.2, 84.0], [15.3, 84.0], [15.4, 85.0], [15.5, 85.0], [15.6, 85.0], [15.7, 85.0], [15.8, 85.0], [15.9, 85.0], [16.0, 85.0], [16.1, 85.0], [16.2, 85.0], [16.3, 85.0], [16.4, 85.0], [16.5, 86.0], [16.6, 86.0], [16.7, 86.0], [16.8, 86.0], [16.9, 86.0], [17.0, 86.0], [17.1, 86.0], [17.2, 86.0], [17.3, 87.0], [17.4, 87.0], [17.5, 87.0], [17.6, 87.0], [17.7, 87.0], [17.8, 87.0], [17.9, 87.0], [18.0, 87.0], [18.1, 88.0], [18.2, 88.0], [18.3, 88.0], [18.4, 88.0], [18.5, 88.0], [18.6, 88.0], [18.7, 89.0], [18.8, 89.0], [18.9, 89.0], [19.0, 89.0], [19.1, 89.0], [19.2, 89.0], [19.3, 89.0], [19.4, 89.0], [19.5, 89.0], [19.6, 89.0], [19.7, 89.0], [19.8, 89.0], [19.9, 89.0], [20.0, 90.0], [20.1, 90.0], [20.2, 90.0], [20.3, 90.0], [20.4, 90.0], [20.5, 91.0], [20.6, 91.0], [20.7, 91.0], [20.8, 91.0], [20.9, 91.0], [21.0, 91.0], [21.1, 91.0], [21.2, 91.0], [21.3, 92.0], [21.4, 92.0], [21.5, 92.0], [21.6, 92.0], [21.7, 92.0], [21.8, 92.0], [21.9, 92.0], [22.0, 92.0], [22.1, 93.0], [22.2, 93.0], [22.3, 93.0], [22.4, 93.0], [22.5, 93.0], [22.6, 93.0], [22.7, 93.0], [22.8, 93.0], [22.9, 93.0], [23.0, 94.0], [23.1, 94.0], [23.2, 94.0], [23.3, 94.0], [23.4, 94.0], [23.5, 94.0], [23.6, 95.0], [23.7, 95.0], [23.8, 95.0], [23.9, 95.0], [24.0, 95.0], [24.1, 95.0], [24.2, 95.0], [24.3, 95.0], [24.4, 95.0], [24.5, 96.0], [24.6, 96.0], [24.7, 96.0], [24.8, 96.0], [24.9, 96.0], [25.0, 96.0], [25.1, 96.0], [25.2, 96.0], [25.3, 96.0], [25.4, 97.0], [25.5, 97.0], [25.6, 97.0], [25.7, 97.0], [25.8, 97.0], [25.9, 97.0], [26.0, 97.0], [26.1, 97.0], [26.2, 97.0], [26.3, 98.0], [26.4, 98.0], [26.5, 98.0], [26.6, 98.0], [26.7, 98.0], [26.8, 98.0], [26.9, 99.0], [27.0, 99.0], [27.1, 99.0], [27.2, 99.0], [27.3, 99.0], [27.4, 99.0], [27.5, 99.0], [27.6, 99.0], [27.7, 99.0], [27.8, 99.0], [27.9, 100.0], [28.0, 100.0], [28.1, 100.0], [28.2, 100.0], [28.3, 100.0], [28.4, 100.0], [28.5, 100.0], [28.6, 100.0], [28.7, 101.0], [28.8, 101.0], [28.9, 101.0], [29.0, 101.0], [29.1, 101.0], [29.2, 101.0], [29.3, 102.0], [29.4, 102.0], [29.5, 102.0], [29.6, 102.0], [29.7, 102.0], [29.8, 102.0], [29.9, 102.0], [30.0, 102.0], [30.1, 102.0], [30.2, 102.0], [30.3, 102.0], [30.4, 102.0], [30.5, 103.0], [30.6, 103.0], [30.7, 103.0], [30.8, 103.0], [30.9, 103.0], [31.0, 103.0], [31.1, 103.0], [31.2, 103.0], [31.3, 103.0], [31.4, 103.0], [31.5, 103.0], [31.6, 104.0], [31.7, 104.0], [31.8, 104.0], [31.9, 104.0], [32.0, 104.0], [32.1, 104.0], [32.2, 104.0], [32.3, 104.0], [32.4, 104.0], [32.5, 104.0], [32.6, 104.0], [32.7, 104.0], [32.8, 104.0], [32.9, 104.0], [33.0, 105.0], [33.1, 105.0], [33.2, 105.0], [33.3, 105.0], [33.4, 105.0], [33.5, 105.0], [33.6, 105.0], [33.7, 105.0], [33.8, 105.0], [33.9, 106.0], [34.0, 106.0], [34.1, 106.0], [34.2, 106.0], [34.3, 106.0], [34.4, 107.0], [34.5, 107.0], [34.6, 107.0], [34.7, 107.0], [34.8, 107.0], [34.9, 107.0], [35.0, 107.0], [35.1, 108.0], [35.2, 108.0], [35.3, 108.0], [35.4, 108.0], [35.5, 108.0], [35.6, 109.0], [35.7, 109.0], [35.8, 109.0], [35.9, 109.0], [36.0, 109.0], [36.1, 109.0], [36.2, 109.0], [36.3, 109.0], [36.4, 109.0], [36.5, 110.0], [36.6, 110.0], [36.7, 110.0], [36.8, 110.0], [36.9, 110.0], [37.0, 110.0], [37.1, 110.0], [37.2, 110.0], [37.3, 111.0], [37.4, 111.0], [37.5, 111.0], [37.6, 111.0], [37.7, 111.0], [37.8, 112.0], [37.9, 112.0], [38.0, 112.0], [38.1, 112.0], [38.2, 112.0], [38.3, 113.0], [38.4, 113.0], [38.5, 113.0], [38.6, 113.0], [38.7, 113.0], [38.8, 114.0], [38.9, 114.0], [39.0, 114.0], [39.1, 114.0], [39.2, 114.0], [39.3, 115.0], [39.4, 115.0], [39.5, 115.0], [39.6, 116.0], [39.7, 116.0], [39.8, 116.0], [39.9, 116.0], [40.0, 116.0], [40.1, 116.0], [40.2, 116.0], [40.3, 117.0], [40.4, 117.0], [40.5, 117.0], [40.6, 117.0], [40.7, 117.0], [40.8, 117.0], [40.9, 117.0], [41.0, 118.0], [41.1, 118.0], [41.2, 118.0], [41.3, 118.0], [41.4, 118.0], [41.5, 119.0], [41.6, 119.0], [41.7, 119.0], [41.8, 119.0], [41.9, 119.0], [42.0, 119.0], [42.1, 119.0], [42.2, 120.0], [42.3, 120.0], [42.4, 120.0], [42.5, 120.0], [42.6, 120.0], [42.7, 120.0], [42.8, 120.0], [42.9, 120.0], [43.0, 121.0], [43.1, 121.0], [43.2, 121.0], [43.3, 121.0], [43.4, 122.0], [43.5, 122.0], [43.6, 122.0], [43.7, 122.0], [43.8, 123.0], [43.9, 123.0], [44.0, 123.0], [44.1, 123.0], [44.2, 123.0], [44.3, 123.0], [44.4, 124.0], [44.5, 124.0], [44.6, 124.0], [44.7, 124.0], [44.8, 124.0], [44.9, 124.0], [45.0, 124.0], [45.1, 125.0], [45.2, 125.0], [45.3, 126.0], [45.4, 126.0], [45.5, 126.0], [45.6, 126.0], [45.7, 126.0], [45.8, 126.0], [45.9, 126.0], [46.0, 126.0], [46.1, 127.0], [46.2, 127.0], [46.3, 127.0], [46.4, 127.0], [46.5, 128.0], [46.6, 128.0], [46.7, 128.0], [46.8, 129.0], [46.9, 129.0], [47.0, 129.0], [47.1, 129.0], [47.2, 129.0], [47.3, 130.0], [47.4, 130.0], [47.5, 130.0], [47.6, 130.0], [47.7, 130.0], [47.8, 130.0], [47.9, 130.0], [48.0, 131.0], [48.1, 131.0], [48.2, 131.0], [48.3, 132.0], [48.4, 132.0], [48.5, 132.0], [48.6, 132.0], [48.7, 133.0], [48.8, 133.0], [48.9, 133.0], [49.0, 133.0], [49.1, 133.0], [49.2, 134.0], [49.3, 134.0], [49.4, 134.0], [49.5, 134.0], [49.6, 135.0], [49.7, 135.0], [49.8, 135.0], [49.9, 135.0], [50.0, 135.0], [50.1, 135.0], [50.2, 135.0], [50.3, 136.0], [50.4, 136.0], [50.5, 137.0], [50.6, 137.0], [50.7, 138.0], [50.8, 138.0], [50.9, 139.0], [51.0, 139.0], [51.1, 139.0], [51.2, 139.0], [51.3, 139.0], [51.4, 139.0], [51.5, 139.0], [51.6, 140.0], [51.7, 140.0], [51.8, 140.0], [51.9, 141.0], [52.0, 141.0], [52.1, 142.0], [52.2, 142.0], [52.3, 142.0], [52.4, 142.0], [52.5, 143.0], [52.6, 144.0], [52.7, 144.0], [52.8, 144.0], [52.9, 144.0], [53.0, 144.0], [53.1, 144.0], [53.2, 145.0], [53.3, 145.0], [53.4, 145.0], [53.5, 145.0], [53.6, 146.0], [53.7, 146.0], [53.8, 146.0], [53.9, 146.0], [54.0, 147.0], [54.1, 147.0], [54.2, 147.0], [54.3, 148.0], [54.4, 148.0], [54.5, 149.0], [54.6, 149.0], [54.7, 150.0], [54.8, 150.0], [54.9, 150.0], [55.0, 150.0], [55.1, 151.0], [55.2, 151.0], [55.3, 151.0], [55.4, 151.0], [55.5, 151.0], [55.6, 152.0], [55.7, 152.0], [55.8, 152.0], [55.9, 152.0], [56.0, 153.0], [56.1, 153.0], [56.2, 153.0], [56.3, 154.0], [56.4, 154.0], [56.5, 154.0], [56.6, 154.0], [56.7, 154.0], [56.8, 155.0], [56.9, 155.0], [57.0, 155.0], [57.1, 155.0], [57.2, 155.0], [57.3, 156.0], [57.4, 156.0], [57.5, 156.0], [57.6, 156.0], [57.7, 157.0], [57.8, 157.0], [57.9, 158.0], [58.0, 158.0], [58.1, 159.0], [58.2, 160.0], [58.3, 160.0], [58.4, 160.0], [58.5, 160.0], [58.6, 161.0], [58.7, 161.0], [58.8, 162.0], [58.9, 162.0], [59.0, 162.0], [59.1, 162.0], [59.2, 163.0], [59.3, 164.0], [59.4, 164.0], [59.5, 164.0], [59.6, 164.0], [59.7, 165.0], [59.8, 165.0], [59.9, 166.0], [60.0, 166.0], [60.1, 167.0], [60.2, 168.0], [60.3, 168.0], [60.4, 169.0], [60.5, 169.0], [60.6, 170.0], [60.7, 170.0], [60.8, 171.0], [60.9, 171.0], [61.0, 172.0], [61.1, 173.0], [61.2, 173.0], [61.3, 174.0], [61.4, 174.0], [61.5, 175.0], [61.6, 175.0], [61.7, 176.0], [61.8, 177.0], [61.9, 177.0], [62.0, 178.0], [62.1, 179.0], [62.2, 179.0], [62.3, 180.0], [62.4, 181.0], [62.5, 181.0], [62.6, 181.0], [62.7, 181.0], [62.8, 182.0], [62.9, 182.0], [63.0, 183.0], [63.1, 184.0], [63.2, 184.0], [63.3, 184.0], [63.4, 185.0], [63.5, 185.0], [63.6, 186.0], [63.7, 186.0], [63.8, 188.0], [63.9, 189.0], [64.0, 189.0], [64.1, 191.0], [64.2, 192.0], [64.3, 192.0], [64.4, 193.0], [64.5, 193.0], [64.6, 193.0], [64.7, 193.0], [64.8, 196.0], [64.9, 196.0], [65.0, 197.0], [65.1, 199.0], [65.2, 201.0], [65.3, 203.0], [65.4, 203.0], [65.5, 204.0], [65.6, 205.0], [65.7, 206.0], [65.8, 210.0], [65.9, 211.0], [66.0, 215.0], [66.1, 215.0], [66.2, 216.0], [66.3, 217.0], [66.4, 218.0], [66.5, 223.0], [66.6, 224.0], [66.7, 226.0], [66.8, 232.0], [66.9, 232.0], [67.0, 235.0], [67.1, 235.0], [67.2, 238.0], [67.3, 240.0], [67.4, 242.0], [67.5, 245.0], [67.6, 247.0], [67.7, 256.0], [67.8, 259.0], [67.9, 259.0], [68.0, 265.0], [68.1, 279.0], [68.2, 286.0], [68.3, 298.0], [68.4, 307.0], [68.5, 336.0], [68.6, 353.0], [68.7, 378.0], [68.8, 388.0], [68.9, 390.0], [69.0, 431.0], [69.1, 446.0], [69.2, 446.0], [69.3, 499.0], [69.4, 527.0], [69.5, 546.0], [69.6, 576.0], [69.7, 578.0], [69.8, 599.0], [69.9, 601.0], [70.0, 617.0], [70.1, 625.0], [70.2, 632.0], [70.3, 635.0], [70.4, 636.0], [70.5, 659.0], [70.6, 661.0], [70.7, 684.0], [70.8, 689.0], [70.9, 690.0], [71.0, 699.0], [71.1, 701.0], [71.2, 703.0], [71.3, 726.0], [71.4, 732.0], [71.5, 770.0], [71.6, 775.0], [71.7, 793.0], [71.8, 835.0], [71.9, 836.0], [72.0, 882.0], [72.1, 887.0], [72.2, 890.0], [72.3, 898.0], [72.4, 910.0], [72.5, 954.0], [72.6, 986.0], [72.7, 996.0], [72.8, 1046.0], [72.9, 1047.0], [73.0, 1062.0], [73.1, 1067.0], [73.2, 1079.0], [73.3, 1085.0], [73.4, 1088.0], [73.5, 1091.0], [73.6, 1092.0], [73.7, 1096.0], [73.8, 1099.0], [73.9, 1100.0], [74.0, 1110.0], [74.1, 1110.0], [74.2, 1116.0], [74.3, 1117.0], [74.4, 1123.0], [74.5, 1133.0], [74.6, 1134.0], [74.7, 1139.0], [74.8, 1139.0], [74.9, 1141.0], [75.0, 1141.0], [75.1, 1141.0], [75.2, 1144.0], [75.3, 1153.0], [75.4, 1158.0], [75.5, 1163.0], [75.6, 1167.0], [75.7, 1169.0], [75.8, 1169.0], [75.9, 1174.0], [76.0, 1180.0], [76.1, 1180.0], [76.2, 1181.0], [76.3, 1188.0], [76.4, 1192.0], [76.5, 1194.0], [76.6, 1194.0], [76.7, 1206.0], [76.8, 1215.0], [76.9, 1216.0], [77.0, 1218.0], [77.1, 1222.0], [77.2, 1223.0], [77.3, 1228.0], [77.4, 1230.0], [77.5, 1233.0], [77.6, 1235.0], [77.7, 1236.0], [77.8, 1244.0], [77.9, 1255.0], [78.0, 1262.0], [78.1, 1277.0], [78.2, 1283.0], [78.3, 1292.0], [78.4, 1306.0], [78.5, 1312.0], [78.6, 1313.0], [78.7, 1313.0], [78.8, 1332.0], [78.9, 1334.0], [79.0, 1343.0], [79.1, 1346.0], [79.2, 1355.0], [79.3, 1358.0], [79.4, 1370.0], [79.5, 1376.0], [79.6, 1378.0], [79.7, 1384.0], [79.8, 1385.0], [79.9, 1385.0], [80.0, 1387.0], [80.1, 1392.0], [80.2, 1394.0], [80.3, 1398.0], [80.4, 1401.0], [80.5, 1406.0], [80.6, 1408.0], [80.7, 1408.0], [80.8, 1413.0], [80.9, 1414.0], [81.0, 1422.0], [81.1, 1425.0], [81.2, 1425.0], [81.3, 1425.0], [81.4, 1432.0], [81.5, 1434.0], [81.6, 1435.0], [81.7, 1436.0], [81.8, 1448.0], [81.9, 1448.0], [82.0, 1450.0], [82.1, 1453.0], [82.2, 1453.0], [82.3, 1464.0], [82.4, 1470.0], [82.5, 1471.0], [82.6, 1473.0], [82.7, 1473.0], [82.8, 1477.0], [82.9, 1479.0], [83.0, 1480.0], [83.1, 1485.0], [83.2, 1487.0], [83.3, 1487.0], [83.4, 1488.0], [83.5, 1490.0], [83.6, 1491.0], [83.7, 1496.0], [83.8, 1497.0], [83.9, 1498.0], [84.0, 1499.0], [84.1, 1500.0], [84.2, 1501.0], [84.3, 1504.0], [84.4, 1513.0], [84.5, 1515.0], [84.6, 1515.0], [84.7, 1517.0], [84.8, 1518.0], [84.9, 1519.0], [85.0, 1521.0], [85.1, 1521.0], [85.2, 1522.0], [85.3, 1522.0], [85.4, 1525.0], [85.5, 1527.0], [85.6, 1530.0], [85.7, 1532.0], [85.8, 1533.0], [85.9, 1534.0], [86.0, 1540.0], [86.1, 1542.0], [86.2, 1543.0], [86.3, 1555.0], [86.4, 1555.0], [86.5, 1572.0], [86.6, 1575.0], [86.7, 1577.0], [86.8, 1584.0], [86.9, 1586.0], [87.0, 1590.0], [87.1, 1592.0], [87.2, 1594.0], [87.3, 1606.0], [87.4, 1610.0], [87.5, 1617.0], [87.6, 1618.0], [87.7, 1674.0], [87.8, 1696.0], [87.9, 1698.0], [88.0, 1709.0], [88.1, 1710.0], [88.2, 1710.0], [88.3, 1713.0], [88.4, 1717.0], [88.5, 1720.0], [88.6, 1723.0], [88.7, 1724.0], [88.8, 1747.0], [88.9, 1752.0], [89.0, 1759.0], [89.1, 1762.0], [89.2, 1768.0], [89.3, 1777.0], [89.4, 1778.0], [89.5, 1790.0], [89.6, 1793.0], [89.7, 1794.0], [89.8, 1796.0], [89.9, 1802.0], [90.0, 1808.0], [90.1, 1815.0], [90.2, 1819.0], [90.3, 1822.0], [90.4, 1822.0], [90.5, 1826.0], [90.6, 1833.0], [90.7, 1847.0], [90.8, 1866.0], [90.9, 1869.0], [91.0, 1885.0], [91.1, 1885.0], [91.2, 1889.0], [91.3, 1905.0], [91.4, 1919.0], [91.5, 1939.0], [91.6, 1945.0], [91.7, 1952.0], [91.8, 1986.0], [91.9, 2005.0], [92.0, 2059.0], [92.1, 2067.0], [92.2, 2073.0], [92.3, 2085.0], [92.4, 2114.0], [92.5, 2170.0], [92.6, 2174.0], [92.7, 2180.0], [92.8, 2201.0], [92.9, 2204.0], [93.0, 2221.0], [93.1, 2223.0], [93.2, 2240.0], [93.3, 2271.0], [93.4, 2277.0], [93.5, 2280.0], [93.6, 2301.0], [93.7, 2311.0], [93.8, 2353.0], [93.9, 2356.0], [94.0, 2370.0], [94.1, 2373.0], [94.2, 2385.0], [94.3, 2408.0], [94.4, 2419.0], [94.5, 2440.0], [94.6, 2452.0], [94.7, 2467.0], [94.8, 2501.0], [94.9, 2511.0], [95.0, 2545.0], [95.1, 2546.0], [95.2, 2551.0], [95.3, 2636.0], [95.4, 2713.0], [95.5, 2765.0], [95.6, 2800.0], [95.7, 2821.0], [95.8, 2912.0], [95.9, 2929.0], [96.0, 2956.0], [96.1, 3002.0], [96.2, 3085.0], [96.3, 3186.0], [96.4, 3201.0], [96.5, 3290.0], [96.6, 3315.0], [96.7, 3380.0], [96.8, 3441.0], [96.9, 3476.0], [97.0, 3489.0], [97.1, 3494.0], [97.2, 3582.0], [97.3, 3713.0], [97.4, 3814.0], [97.5, 4061.0], [97.6, 4111.0], [97.7, 4200.0], [97.8, 4305.0], [97.9, 4317.0], [98.0, 4367.0], [98.1, 4377.0], [98.2, 4571.0], [98.3, 4655.0], [98.4, 4716.0], [98.5, 5250.0], [98.6, 5306.0], [98.7, 5374.0], [98.8, 5664.0], [98.9, 6036.0], [99.0, 6092.0], [99.1, 6151.0], [99.2, 6881.0], [99.3, 7463.0], [99.4, 9251.0], [99.5, 9510.0], [99.6, 9942.0], [99.7, 12376.0], [99.8, 20716.0], [99.9, 25154.0]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 583.0, "series": [{"data": [[0.0, 5.0], [600.0, 11.0], [700.0, 11.0], [800.0, 11.0], [900.0, 7.0], [1000.0, 1.0], [1100.0, 32.0], [1200.0, 51.0], [1300.0, 50.0], [1400.0, 52.0], [1500.0, 59.0], [1600.0, 37.0], [1700.0, 33.0], [1800.0, 31.0], [1900.0, 21.0], [2000.0, 11.0], [2100.0, 9.0], [2300.0, 6.0], [2200.0, 13.0], [2400.0, 6.0], [2500.0, 5.0], [2600.0, 4.0], [2700.0, 5.0], [2800.0, 2.0], [2900.0, 7.0], [3000.0, 4.0], [3100.0, 1.0], [3200.0, 4.0], [3400.0, 3.0], [3500.0, 3.0], [3600.0, 2.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 3.0], [4100.0, 7.0], [4200.0, 2.0], [4300.0, 3.0], [4500.0, 4.0], [4400.0, 2.0], [4700.0, 3.0], [4800.0, 2.0], [5000.0, 3.0], [5300.0, 1.0], [5200.0, 1.0], [5500.0, 1.0], [5400.0, 2.0], [5700.0, 1.0], [5900.0, 1.0], [6400.0, 1.0], [6900.0, 1.0], [6800.0, 2.0], [6700.0, 1.0], [7200.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8400.0, 4.0], [8300.0, 1.0], [9100.0, 1.0], [9300.0, 2.0], [10100.0, 1.0], [10000.0, 1.0], [10500.0, 1.0], [11600.0, 1.0], [12100.0, 1.0], [11900.0, 1.0], [14600.0, 1.0], [15800.0, 1.0], [18000.0, 1.0], [19100.0, 1.0], [18600.0, 1.0], [100.0, 582.0], [200.0, 205.0], [300.0, 35.0], [400.0, 6.0], [500.0, 5.0]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[0.0, 2.0], [600.0, 13.0], [700.0, 13.0], [800.0, 15.0], [900.0, 11.0], [1100.0, 48.0], [1200.0, 48.0], [1300.0, 34.0], [1400.0, 51.0], [1500.0, 59.0], [1600.0, 43.0], [1700.0, 29.0], [1800.0, 33.0], [1900.0, 28.0], [2000.0, 5.0], [2100.0, 6.0], [2300.0, 16.0], [2200.0, 7.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 4.0], [2800.0, 6.0], [2700.0, 4.0], [2900.0, 5.0], [3000.0, 2.0], [3100.0, 3.0], [3300.0, 3.0], [3200.0, 2.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 1.0], [3700.0, 5.0], [3800.0, 4.0], [3900.0, 2.0], [4000.0, 5.0], [4100.0, 2.0], [4300.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [4700.0, 2.0], [5000.0, 2.0], [5300.0, 2.0], [5400.0, 2.0], [5600.0, 2.0], [5800.0, 1.0], [6400.0, 1.0], [6500.0, 1.0], [6900.0, 1.0], [7400.0, 1.0], [7500.0, 1.0], [8300.0, 1.0], [8400.0, 2.0], [8800.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [10300.0, 1.0], [13000.0, 1.0], [13700.0, 1.0], [13900.0, 1.0], [15900.0, 1.0], [24900.0, 1.0], [25400.0, 1.0], [100.0, 583.0], [27800.0, 1.0], [44400.0, 1.0], [200.0, 234.0], [56000.0, 1.0], [300.0, 15.0], [400.0, 5.0], [500.0, 6.0]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[0.0, 390.0], [600.0, 17.0], [700.0, 9.0], [800.0, 9.0], [900.0, 5.0], [1000.0, 16.0], [1100.0, 39.0], [1200.0, 24.0], [1300.0, 28.0], [1400.0, 52.0], [1500.0, 44.0], [1600.0, 10.0], [1700.0, 27.0], [1800.0, 20.0], [1900.0, 8.0], [2000.0, 7.0], [2100.0, 6.0], [2200.0, 11.0], [2300.0, 10.0], [2400.0, 7.0], [2500.0, 7.0], [2600.0, 1.0], [2800.0, 3.0], [2700.0, 3.0], [2900.0, 4.0], [3000.0, 2.0], [3100.0, 2.0], [3300.0, 2.0], [3200.0, 3.0], [3400.0, 6.0], [3500.0, 2.0], [3700.0, 1.0], [3800.0, 1.0], [4000.0, 2.0], [4300.0, 5.0], [4200.0, 2.0], [4100.0, 1.0], [4500.0, 1.0], [4600.0, 2.0], [4700.0, 2.0], [5300.0, 3.0], [5200.0, 1.0], [5600.0, 1.0], [6000.0, 3.0], [6100.0, 1.0], [6800.0, 1.0], [7400.0, 2.0], [9200.0, 2.0], [9500.0, 1.0], [9900.0, 1.0], [12300.0, 1.0], [16800.0, 1.0], [20700.0, 1.0], [25100.0, 1.0], [100.0, 522.0], [34000.0, 1.0], [200.0, 45.0], [300.0, 8.0], [400.0, 6.0], [500.0, 7.0]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 678.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2643.0, "series": [{"data": [[0.0, 2643.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 678.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 879.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65560214E12, "maxY": 14.0, "series": [{"data": [[1.65560226E12, 14.0], [1.65560244E12, 11.779596977329975], [1.65560214E12, 14.0], [1.65560232E12, 14.0], [1.6556025E12, 1.0], [1.6556022E12, 14.0], [1.65560238E12, 14.0]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6556025E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 58.0, "minX": 1.0, "maxY": 11232.25, "series": [{"data": [[8.0, 466.6666666666667], [2.0, 1258.7142857142858], [9.0, 873.8888888888889], [11.0, 867.6363636363637], [12.0, 334.92857142857144], [3.0, 158.0], [13.0, 343.0434782608697], [14.0, 1054.501552795032], [4.0, 206.0], [1.0, 913.6666666666666], [5.0, 1240.5555555555557], [6.0, 443.7142857142857], [7.0, 1072.6923076923076]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[13.555714285714284, 1029.4278571428579]], "isOverall": false, "label": "查询测试-Aggregated", "isController": false}, {"data": [[8.0, 1090.75], [2.0, 1300.7142857142856], [9.0, 408.74999999999994], [10.0, 125.5], [11.0, 200.875], [12.0, 728.875], [3.0, 165.5], [13.0, 561.3809523809523], [14.0, 1029.6874512860488], [4.0, 1174.75], [1.0, 11232.25], [5.0, 751.4375], [6.0, 656.6], [7.0, 647.1818181818182]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[13.522857142857143, 1028.8842857142859]], "isOverall": false, "label": "发帖测试-Aggregated", "isController": false}, {"data": [[8.0, 979.0], [2.0, 210.0], [9.0, 285.40000000000003], [10.0, 58.0], [11.0, 676.8181818181819], [12.0, 393.15384615384613], [3.0, 103.33333333333333], [13.0, 264.3181818181818], [14.0, 765.6212238574747], [1.0, 99.0], [5.0, 471.3888888888889], [6.0, 75.66666666666667], [7.0, 762.0]], "isOverall": false, "label": "登录测试", "isController": false}, {"data": [[13.56928571428571, 737.7121428571427]], "isOverall": false, "label": "登录测试-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 14.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 40.983333333333334, "minX": 1.65560214E12, "maxY": 11795.883333333333, "series": [{"data": [[1.65560226E12, 6252.35], [1.65560244E12, 6581.9], [1.65560214E12, 116.98333333333333], [1.65560232E12, 6281.55], [1.6556025E12, 79.26666666666667], [1.6556022E12, 3742.5666666666666], [1.65560238E12, 11795.883333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65560226E12, 3021.633333333333], [1.65560244E12, 3190.65], [1.65560214E12, 52.21666666666667], [1.65560232E12, 3038.2], [1.6556025E12, 40.983333333333334], [1.6556022E12, 1802.0166666666667], [1.65560238E12, 5712.633333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6556025E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 99.0, "minX": 1.65560214E12, "maxY": 11232.25, "series": [{"data": [[1.65560226E12, 1178.6175298804785], [1.65560244E12, 645.5639097744357], [1.65560214E12, 1447.0], [1.65560232E12, 1360.0595238095234], [1.6556025E12, 913.6666666666666], [1.6556022E12, 2004.0261437908487], [1.65560238E12, 673.6997885835102]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[1.65560226E12, 1278.708], [1.65560244E12, 635.1152416356875], [1.65560232E12, 1228.7817460317451], [1.6556025E12, 11232.25], [1.6556022E12, 1888.2533333333333], [1.65560238E12, 657.0421052631581]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[1.65560226E12, 975.2420634920635], [1.65560244E12, 399.3050193050192], [1.65560214E12, 1483.5833333333335], [1.65560232E12, 796.4822134387341], [1.6556025E12, 99.0], [1.6556022E12, 1714.0273972602733], [1.65560238E12, 450.01684210526304]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6556025E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 99.0, "minX": 1.65560214E12, "maxY": 11232.25, "series": [{"data": [[1.65560226E12, 1178.5418326693218], [1.65560244E12, 645.5413533834591], [1.65560214E12, 1447.0], [1.65560232E12, 1359.7619047619041], [1.6556025E12, 913.6666666666666], [1.6556022E12, 2003.9346405228753], [1.65560238E12, 673.6532769556026]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[1.65560226E12, 1278.656], [1.65560244E12, 635.096654275093], [1.65560232E12, 1228.7380952380954], [1.6556025E12, 11232.25], [1.6556022E12, 1888.1200000000008], [1.65560238E12, 657.0105263157894]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[1.65560226E12, 975.1785714285711], [1.65560244E12, 399.27413127413126], [1.65560214E12, 1483.5833333333335], [1.65560232E12, 796.4110671936754], [1.6556025E12, 99.0], [1.6556022E12, 1713.8904109589048], [1.65560238E12, 449.96421052631604]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6556025E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65560214E12, "maxY": 29.75, "series": [{"data": [[1.65560226E12, 0.023904382470119515], [1.65560244E12, 0.0075187969924812095], [1.65560214E12, 0.0], [1.65560232E12, 0.027777777777777776], [1.6556025E12, 0.0], [1.6556022E12, 0.006535947712418299], [1.65560238E12, 0.008456659619450317]], "isOverall": false, "label": "查询测试", "isController": false}, {"data": [[1.65560226E12, 0.011999999999999999], [1.65560244E12, 0.0], [1.65560232E12, 0.007936507936507934], [1.6556025E12, 0.0], [1.6556022E12, 0.06666666666666664], [1.65560238E12, 0.012631578947368414]], "isOverall": false, "label": "发帖测试", "isController": false}, {"data": [[1.65560226E12, 0.03174603174603174], [1.65560244E12, 0.007722007722007719], [1.65560214E12, 29.75], [1.65560232E12, 0.019762845849802372], [1.6556025E12, 0.6666666666666667], [1.6556022E12, 0.4383561643835614], [1.65560238E12, 0.004210526315789475]], "isOverall": false, "label": "登录测试", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6556025E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 44.0, "minX": 1.65560214E12, "maxY": 56063.0, "series": [{"data": [[1.65560226E12, 56063.0], [1.65560244E12, 13755.0], [1.65560214E12, 1522.0], [1.65560232E12, 27856.0], [1.6556025E12, 44435.0], [1.6556022E12, 25154.0], [1.65560238E12, 15919.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65560226E12, 2250.4000000000005], [1.65560244E12, 1542.5], [1.65560214E12, 1522.0], [1.65560232E12, 2191.2000000000007], [1.6556025E12, 40120.70000000002], [1.6556022E12, 4206.0], [1.65560238E12, 1545.6000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65560226E12, 6886.52], [1.65560244E12, 2766.449999999999], [1.65560214E12, 1522.0], [1.65560232E12, 9243.039999999995], [1.6556025E12, 44435.0], [1.6556022E12, 18911.5], [1.65560238E12, 5087.719999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65560226E12, 3507.0], [1.65560244E12, 1805.0], [1.65560214E12, 1522.0], [1.65560232E12, 3304.9000000000033], [1.6556025E12, 44435.0], [1.6556022E12, 7594.5], [1.65560238E12, 2197.999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65560226E12, 59.0], [1.65560244E12, 44.0], [1.65560214E12, 1436.0], [1.65560232E12, 59.0], [1.6556025E12, 90.0], [1.6556022E12, 61.0], [1.65560238E12, 53.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65560226E12, 251.0], [1.65560244E12, 165.0], [1.65560214E12, 1479.5], [1.65560232E12, 286.0], [1.6556025E12, 157.5], [1.6556022E12, 923.0], [1.65560238E12, 167.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6556025E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 2449.0, "series": [{"data": [[2.0, 1369.5], [3.0, 1973.0], [4.0, 2449.0], [5.0, 1422.0], [6.0, 1217.5], [7.0, 1354.0], [8.0, 1614.0], [9.0, 1796.0], [10.0, 1424.5], [11.0, 282.0], [12.0, 1509.5], [13.0, 315.5], [14.0, 1698.5], [15.0, 1547.0], [16.0, 247.0], [17.0, 1283.0], [18.0, 816.0], [19.0, 299.0], [20.0, 1176.0], [21.0, 1197.0], [22.0, 1223.5], [23.0, 1218.0], [24.0, 243.0], [25.0, 189.0], [26.0, 882.0], [27.0, 158.5], [28.0, 233.5], [29.0, 319.0], [30.0, 190.5], [31.0, 217.0], [32.0, 177.5], [33.0, 187.5], [35.0, 210.0], [34.0, 272.0], [37.0, 174.0], [36.0, 187.0], [39.0, 170.0], [38.0, 120.0], [41.0, 224.0], [40.0, 166.5], [43.0, 210.0], [45.0, 143.0], [44.0, 140.0], [48.0, 177.0], [51.0, 148.0], [53.0, 134.0], [54.0, 139.0], [56.0, 191.0], [59.0, 161.0], [58.0, 172.5], [62.0, 172.5], [65.0, 170.5], [64.0, 161.5], [76.0, 131.0], [77.0, 182.0], [85.0, 146.0], [84.0, 149.0], [103.0, 137.0], [100.0, 137.5], [104.0, 132.0], [107.0, 143.0], [1.0, 1912.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 107.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 2449.0, "series": [{"data": [[2.0, 1369.5], [3.0, 1973.0], [4.0, 2449.0], [5.0, 1422.0], [6.0, 1217.0], [7.0, 1354.0], [8.0, 1613.5], [9.0, 1796.0], [10.0, 1424.5], [11.0, 282.0], [12.0, 1509.5], [13.0, 315.5], [14.0, 1698.5], [15.0, 1547.0], [16.0, 247.0], [17.0, 1283.0], [18.0, 815.5], [19.0, 299.0], [20.0, 1176.0], [21.0, 1197.0], [22.0, 1223.5], [23.0, 1218.0], [24.0, 243.0], [25.0, 189.0], [26.0, 882.0], [27.0, 158.5], [28.0, 233.5], [29.0, 319.0], [30.0, 190.5], [31.0, 217.0], [32.0, 177.5], [33.0, 187.5], [35.0, 210.0], [34.0, 272.0], [37.0, 174.0], [36.0, 187.0], [39.0, 170.0], [38.0, 120.0], [41.0, 224.0], [40.0, 166.5], [43.0, 210.0], [45.0, 143.0], [44.0, 140.0], [48.0, 177.0], [51.0, 148.0], [53.0, 134.0], [54.0, 139.0], [56.0, 190.0], [59.0, 161.0], [58.0, 172.5], [62.0, 172.5], [65.0, 170.5], [64.0, 161.5], [76.0, 131.0], [77.0, 182.0], [85.0, 146.0], [84.0, 148.5], [103.0, 137.0], [100.0, 137.5], [104.0, 132.0], [107.0, 143.0], [1.0, 1912.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 107.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.65560214E12, "maxY": 23.716666666666665, "series": [{"data": [[1.65560226E12, 12.55], [1.65560244E12, 13.016666666666667], [1.65560214E12, 0.4666666666666667], [1.65560232E12, 12.616666666666667], [1.6556025E12, 0.15], [1.6556022E12, 7.483333333333333], [1.65560238E12, 23.716666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6556025E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.65560214E12, "maxY": 23.716666666666665, "series": [{"data": [[1.65560226E12, 12.55], [1.65560244E12, 13.233333333333333], [1.65560214E12, 0.23333333333333334], [1.65560232E12, 12.616666666666667], [1.6556025E12, 0.16666666666666666], [1.6556022E12, 7.483333333333333], [1.65560238E12, 23.716666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6556025E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65560214E12, "maxY": 7.916666666666667, "series": [{"data": [[1.65560226E12, 4.183333333333334], [1.65560244E12, 4.433333333333334], [1.65560214E12, 0.03333333333333333], [1.65560232E12, 4.2], [1.6556025E12, 0.05], [1.6556022E12, 2.55], [1.65560238E12, 7.883333333333334]], "isOverall": false, "label": "查询测试-success", "isController": false}, {"data": [[1.65560226E12, 4.166666666666667], [1.65560244E12, 4.483333333333333], [1.65560232E12, 4.2], [1.6556025E12, 0.06666666666666667], [1.6556022E12, 2.5], [1.65560238E12, 7.916666666666667]], "isOverall": false, "label": "发帖测试-success", "isController": false}, {"data": [[1.65560226E12, 4.2], [1.65560244E12, 4.316666666666666], [1.65560214E12, 0.2], [1.65560232E12, 4.216666666666667], [1.6556025E12, 0.05], [1.6556022E12, 2.433333333333333], [1.65560238E12, 7.916666666666667]], "isOverall": false, "label": "登录测试-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6556025E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.65560214E12, "maxY": 23.716666666666665, "series": [{"data": [[1.65560226E12, 12.55], [1.65560244E12, 13.233333333333333], [1.65560214E12, 0.23333333333333334], [1.65560232E12, 12.616666666666667], [1.6556025E12, 0.16666666666666666], [1.6556022E12, 7.483333333333333], [1.65560238E12, 23.716666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6556025E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

